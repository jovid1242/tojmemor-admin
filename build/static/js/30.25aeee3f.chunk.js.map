{"version":3,"sources":["components/@vuexy/projects/tables/slider/ModalWarning.js","components/@vuexy/projects/tables/slider/ModalAdd.js","components/@vuexy/projects/tables/slider/ModalEdit.js","components/@vuexy/projects/tables/slider/DataTableCustom.js","components/@vuexy/projects/tables/slider/DataTables.js","views/pages/Pr_sliders.js"],"names":["ModalWarning","show","closeModal","id","deleteProjects","toggleModal","submitForm","e","http","delete","then","res","txt","toast","success","catch","errors","message","warning","Modal","isOpen","toggle","className","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","formSchema","Yup","shape","required","minlength","min","maxlength","max","ModalAdd","closeModalAdd","addProjects","projects","useState","files","setFiles","image","preloadImg","setpreloadImg","project_id","file","post","setPost","editorState","EditorState","createEmpty","handleFileInput","target","img","URL","createObjectURL","useDropzone","accept","onDrop","acceptedFiles","map","Object","assign","preview","getRootProps","getInputProps","preventDefault","data","FormData","append","response","error","key","name","src","alt","useEffect","forEach","revokeObjectURL","initialValues","date","validationSchema","touched","onSubmit","Card","CardBody","FormGroup","Label","for","CustomInput","type","onChange","value","el","index","title","Ripple","ModalEdit","closeModalEdit","editProjects","project","put","Index","setProjects","modal","setModal","modalAdd","setModalAdd","modalEdit","setModalEdit","setProject","idNews","setIdNews","get","pr_sliders","findIndex","element","splice","act","prevState","text","url","CardHeader","CardTitle","Table","responsive","scope","item","findProject","size","outline","UncontrolledTooltip","placement","DataTables","Fragment","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","sm","React","Component","Projects"],"mappings":"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","file":"static/js/30.25aeee3f.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\nimport http from '../../../../../http'\r\nimport { toast } from 'react-toastify'\r\n\r\nexport default function ModalWarning({ show, closeModal, id, deleteProjects }) {\r\n    const notifyWarning = (txt) => toast.warning(txt)\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModal(false)\r\n        }\r\n        closeModal(true)\r\n    }\r\n    const submitForm = (e) => {\r\n        deleteProjects(id)\r\n        http.delete(`pr_slider/delete/${id}`)\r\n            .then((res) => {\r\n                notifySuccess('Картинка была успешно удалена!')\r\n            })\r\n            .catch(function (errors) {\r\n                notifyWarning(`Ошибка: ${errors.message}`)\r\n            })\r\n    }\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-danger\">\r\n                    Внимание\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    Вы уверены, что хотите удалить этот проект?\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"danger\"\r\n                        onClick={(e) => {\r\n                            submitForm(e)\r\n                            toggleModal()\r\n                        }}\r\n                    >\r\n                        Удалить\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Card,\r\n    CardHeader,\r\n    CardTitle,\r\n    CardBody,\r\n    FormGroup,\r\n    Label,\r\n    CustomInput,\r\n} from 'reactstrap'\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport { Formik, Field, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport '../../../../../assets/scss/plugins/extensions/editor.scss'\r\nimport '../../../../../assets/scss/plugins/extensions/dropzone.scss'\r\nimport http from '../../../../../http'\r\nimport FormData from 'form-data'\r\nimport { toast } from 'react-toastify'\r\n\r\nconst formSchema = Yup.object().shape({\r\n    required: Yup.string().required('Required'),\r\n    minlength: Yup.string().min(4, 'Too Short!').required('Required'),\r\n    maxlength: Yup.string().max(5, 'Too Long!').required('Required'),\r\n})\r\n\r\nexport default function ModalAdd({\r\n    show,\r\n    closeModalAdd,\r\n    addProjects,\r\n    projects,\r\n}) {\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const notifyError = (txt) => toast.error(txt)\r\n    const [files, setFiles] = useState([])\r\n    const [preloadImg, setpreloadImg] = useState({ image: null })\r\n\r\n    const [post, setPost] = useState({\r\n        project_id: null,\r\n        file: null,\r\n    })\r\n\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModalAdd(false)\r\n        }\r\n        closeModalAdd(true)\r\n    }\r\n\r\n    const [edit, setEdit] = useState({\r\n        editorState: EditorState.createEmpty(),\r\n    })\r\n\r\n    const handleFileInput = (e) => {\r\n        setPost({ ...post, file: e.target.files[0] })\r\n        if (e.target.files && e.target.files[0]) {\r\n            let img = e.target.files[0]\r\n            setpreloadImg({\r\n                image: URL.createObjectURL(img),\r\n            })\r\n        }\r\n    }\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        accept: 'image/*',\r\n        onDrop: (acceptedFiles) => {\r\n            setFiles(\r\n                acceptedFiles.map((file) =>\r\n                    Object.assign(file, {\r\n                        preview: URL.createObjectURL(file),\r\n                    })\r\n                )\r\n            )\r\n        },\r\n    })\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        const data = new FormData()\r\n        data.append('project_id', post.project_id)\r\n        data.append('image', post.file)\r\n        http.post('pr_slider/create', data)\r\n            .then((response) => {\r\n                toggleModal()\r\n                addProjects(post.project_id, preloadImg.image)\r\n                notifySuccess('Картинка успешно добавлена!')\r\n            })\r\n            .catch(function (errors) {\r\n                notifyError(`Упс, ошибка , ${errors.message}`)\r\n            })\r\n    }\r\n    const thumbs = files.map((file) => (\r\n        <div className=\"dz-thumb\" key={file.name}>\r\n            <div className=\"dz-thumb-inner\">\r\n                <img src={file.preview} className=\"dz-img\" alt={file.name} />\r\n            </div>\r\n        </div>\r\n    ))\r\n\r\n    useEffect(\r\n        () => () => {\r\n            // Make sure to revoke the data uris to avoid memory leaks\r\n            files.forEach((file) => URL.revokeObjectURL(file.preview))\r\n        },\r\n        [files]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered modal-lg\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-primary\">\r\n                    Добавление проекта\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            required: '',\r\n                            name: '',\r\n                            date: '',\r\n                            minlength: '',\r\n                            maxlength: '',\r\n                        }}\r\n                        validationSchema={formSchema}\r\n                    >\r\n                        {({ errors, touched }) => (\r\n                            <Form className=\"w-100\" onSubmit={submitForm}>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Жилой комплекс\r\n                                            </Label>\r\n                                            <CustomInput\r\n                                                type=\"select\"\r\n                                                name=\"select\"\r\n                                                id=\"city\"\r\n                                                onChange={(e) => {\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        project_id:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                <option value=\"\"></option>\r\n                                                {projects?.map((el, index) => {\r\n                                                    return (\r\n                                                        <option\r\n                                                            value={el.id}\r\n                                                            key={index}\r\n                                                        >\r\n                                                            {el.title}\r\n                                                        </option>\r\n                                                    )\r\n                                                })}\r\n                                            </CustomInput>\r\n                                        </FormGroup>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <section>\r\n                                            <div\r\n                                                {...getRootProps({\r\n                                                    className: 'dropzone',\r\n                                                })}\r\n                                            >\r\n                                                <input\r\n                                                    {...getInputProps()}\r\n                                                    onChange={handleFileInput}\r\n                                                />\r\n                                                <p className=\"mx-1\">\r\n                                                    Перетащите сюда файл или\r\n                                                    щелкните, чтобы выбрать файл\r\n                                                </p>\r\n                                            </div>\r\n                                            <aside className=\"thumb-container\">\r\n                                                <div className=\"dz-thumb\">\r\n                                                    <div className=\"dz-thumb-inner\">\r\n                                                        {preloadImg.image !==\r\n                                                        null ? (\r\n                                                            <img\r\n                                                                src={\r\n                                                                    preloadImg.image\r\n                                                                }\r\n                                                                className=\"dz-img\"\r\n                                                                alt=\"dd\"\r\n                                                            />\r\n                                                        ) : null}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </aside>\r\n                                        </section>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    className=\"mt-2\"\r\n                                >\r\n                                    Добавить\r\n                                </Button.Ripple>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </ModalBody>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Card,\r\n    CustomInput,\r\n    CardBody,\r\n    FormGroup,\r\n    Label,\r\n} from 'reactstrap'\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport { Formik, Field, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport '../../../../../assets/scss/plugins/extensions/editor.scss'\r\nimport '../../../../../assets/scss/plugins/extensions/dropzone.scss'\r\nimport http from '../../../../../http'\r\nimport FormData from 'form-data'\r\nimport { toast } from 'react-toastify'\r\nimport htmlToDraft from 'html-to-draftjs'\r\n\r\nconst formSchema = Yup.object().shape({\r\n    required: Yup.string().required('Required'),\r\n    minlength: Yup.string().min(4, 'Too Short!').required('Required'),\r\n    maxlength: Yup.string().max(5, 'Too Long!').required('Required'),\r\n})\r\n\r\nexport default function ModalEdit({\r\n    show,\r\n    closeModalEdit,\r\n    editProjects,\r\n    project,\r\n    projects,\r\n}) {\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const notifyError = (txt) => toast.error(txt)\r\n    const [files, setFiles] = useState([])\r\n    const [edit, setEdit] = useState({\r\n        editorState: EditorState.createEmpty(),\r\n    })\r\n    const [preloadImg, setpreloadImg] = useState({ image: null })\r\n    const [post, setPost] = useState({\r\n        id: null,\r\n        project_id: null,\r\n        file: null,\r\n    })\r\n\r\n    useEffect(() => {\r\n        setPost({\r\n            id: project.id,\r\n            project_id: project.project_id,\r\n            file: project.image,\r\n        })\r\n        setpreloadImg({ image: project.image })\r\n    }, [project])\r\n\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModalEdit(false)\r\n        }\r\n        closeModalEdit(true)\r\n    }\r\n\r\n    const handleFileInput = (e) => {\r\n        setPost({ ...post, file: e.target.files[0] })\r\n        if (e.target.files && e.target.files[0]) {\r\n            let img = e.target.files[0]\r\n            setpreloadImg({\r\n                image: URL.createObjectURL(img),\r\n            })\r\n        }\r\n    }\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        accept: 'image/*',\r\n        onDrop: (acceptedFiles) => {\r\n            setFiles(\r\n                acceptedFiles.map((file) =>\r\n                    Object.assign(file, {\r\n                        preview: URL.createObjectURL(file),\r\n                    })\r\n                )\r\n            )\r\n        },\r\n    })\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        const data = new FormData()\r\n        data.append('project_id', post.project_id)\r\n        data.append('image', post.file)\r\n        http.put(`pr_slider/update/${post.id}`, data)\r\n            .then((response) => {\r\n                editProjects(post, preloadImg.image)\r\n                toggleModal()\r\n                notifySuccess('Картинка успешно изменена!')\r\n            })\r\n            .catch(function (errors) {\r\n                notifyError(`О нет ошибка , ${errors.message}`)\r\n            })\r\n    }\r\n\r\n    const thumbs = files.map((file) => (\r\n        <div className=\"dz-thumb\" key={file.name}>\r\n            <div className=\"dz-thumb-inner\">\r\n                <img src={file.preview} className=\"dz-img\" alt={file.name} />\r\n            </div>\r\n        </div>\r\n    ))\r\n\r\n    useEffect(\r\n        () => () => {\r\n            // Make sure to revoke the data uris to avoid memory leaks\r\n            files.forEach((file) => URL.revokeObjectURL(file.preview))\r\n        },\r\n        [files]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered modal-lg\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-primary\">\r\n                    Редактирование проекта\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            required: '',\r\n                            name: '',\r\n                            date: '',\r\n                            minlength: '',\r\n                            maxlength: '',\r\n                        }}\r\n                        validationSchema={formSchema}\r\n                    >\r\n                        {({ errors, touched }) => (\r\n                            <Form className=\"w-100\" onSubmit={submitForm}>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Жилой комплекс\r\n                                            </Label>\r\n                                            <CustomInput\r\n                                                type=\"select\"\r\n                                                name=\"select\"\r\n                                                id=\"city\"\r\n                                                onChange={(e) => {\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        project_id:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                <option value=\"\"></option>\r\n                                                {projects?.map((el, index) => {\r\n                                                    return (\r\n                                                        <option\r\n                                                            value={el.id}\r\n                                                            key={index}\r\n                                                        >\r\n                                                            {el.title}\r\n                                                        </option>\r\n                                                    )\r\n                                                })}\r\n                                            </CustomInput>\r\n                                        </FormGroup>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <section>\r\n                                            <div\r\n                                                {...getRootProps({\r\n                                                    className: 'dropzone',\r\n                                                })}\r\n                                            >\r\n                                                <input\r\n                                                    {...getInputProps()}\r\n                                                    onChange={handleFileInput}\r\n                                                />\r\n                                                <p className=\"mx-1\">\r\n                                                    Перетащите сюда файл или\r\n                                                    щелкните, чтобы выбрать файл\r\n                                                </p>\r\n                                            </div>\r\n                                            <aside className=\"thumb-container\">\r\n                                                <div className=\"dz-thumb\">\r\n                                                    <div className=\"dz-thumb-inner\">\r\n                                                        {preloadImg.image !==\r\n                                                        null ? (\r\n                                                            <img\r\n                                                                src={\r\n                                                                    preloadImg.image\r\n                                                                }\r\n                                                                className=\"dz-img\"\r\n                                                                alt=\"dd\"\r\n                                                            />\r\n                                                        ) : null}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </aside>\r\n                                        </section>\r\n                                    </CardBody>\r\n                                </Card>\r\n\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    className=\"mt-2\"\r\n                                >\r\n                                    Изменить\r\n                                </Button.Ripple>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </ModalBody>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Table,\r\n    Input,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    CardTitle,\r\n    UncontrolledTooltip,\r\n} from 'reactstrap'\r\nimport { Search } from 'react-feather'\r\nimport * as Icon from 'react-feather'\r\nimport ModalWarning from './ModalWarning'\r\nimport ModalAdd from './ModalAdd'\r\nimport ModalEdit from './ModalEdit'\r\nimport http from '../../../../../http'\r\nimport { Link } from 'react-router-dom'\r\nimport { toast } from 'react-toastify'\r\nimport Tst from '../../../toastify/Toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport '../../../../../assets/scss/plugins/extensions/toastr.scss'\r\nimport './Index.css'\r\n\r\nexport default function Index() {\r\n    const [post, setPost] = useState([])\r\n    const [projects, setProjects] = useState([])\r\n    const [searchPost, setSearchPost] = useState('')\r\n    const [modal, setModal] = useState(false)\r\n    const [modalAdd, setModalAdd] = useState(false)\r\n    const [modalEdit, setModalEdit] = useState(false)\r\n    const [project, setProject] = useState([])\r\n    const [idNews, setIdNews] = useState()\r\n\r\n    useEffect(() => {\r\n        http.get('/pr_slider').then((res) => {\r\n            setPost(res.data.pr_sliders)\r\n        })\r\n        http.get('/projects').then((res) => {\r\n            setProjects(res.data.projects)\r\n        })\r\n    }, [])\r\n\r\n    const closeModal = (act) => {\r\n        setModal(false)\r\n    }\r\n\r\n    const addProjects = (project_id, image) => {\r\n        setPost((prevState) => [...prevState, { project_id, image }])\r\n    }\r\n\r\n    const handleSearchValue = (e) => {\r\n        setSearchPost(e.target.value)\r\n    }\r\n\r\n    const editProjects = (el, file) => {\r\n        let index = post.findIndex((element) => element.id === el.id)\r\n        post[index].title = el.title\r\n        post[index].text = el.text\r\n        post[index].url = el.url\r\n        if (file === null) {\r\n            post[index].image = el.file\r\n        } else {\r\n            post[index].image = file\r\n        }\r\n    }\r\n\r\n    const deleteProjects = (id) => {\r\n        let res = post.findIndex((element) => element.id === id)\r\n        post.splice(res, 1)\r\n    }\r\n\r\n    const closeModalAdd = (act) => {\r\n        setModalAdd(false)\r\n    }\r\n    const closeModalEdit = (act) => {\r\n        setModalEdit(false)\r\n    }\r\n\r\n    const findProject = (el) => {\r\n        return projects.map((item, index) => {\r\n            if (item.id === el.project_id) {\r\n                return <div key={index}>{item.title}</div>\r\n            }\r\n            return\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <ModalWarning\r\n                    show={modal}\r\n                    deleteProjects={deleteProjects}\r\n                    closeModal={closeModal}\r\n                    id={idNews}\r\n                />\r\n                <ModalAdd\r\n                    show={modalAdd}\r\n                    addProjects={addProjects}\r\n                    closeModalAdd={closeModalAdd}\r\n                    projects={projects}\r\n                />\r\n                <ModalEdit\r\n                    show={modalEdit}\r\n                    editProjects={editProjects}\r\n                    closeModalEdit={closeModalEdit}\r\n                    project={project}\r\n                    projects={projects}\r\n                />\r\n                <CardHeader>\r\n                    <CardTitle>Слайдер</CardTitle>\r\n                </CardHeader>\r\n                <CardBody className=\"rdt_Wrapper\">\r\n                    <Tst />\r\n                    <div className=\"d-flex flex-wrap justify-content-between\">\r\n                        <div className=\"add-new\">\r\n                            <>\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                        setModalAdd(true)\r\n                                    }}\r\n                                >\r\n                                    Добавить новое\r\n                                </Button.Ripple>\r\n                            </>\r\n                        </div>\r\n                        <div className=\"position-relative has-icon-left mb-1\">\r\n                            {/* <Input onChange={handleSearchValue} />\r\n                            <div className=\"form-control-position\">\r\n                                <Search size=\"15\" />\r\n                            </div> */}\r\n                        </div>\r\n                    </div>\r\n                    <Table className=\"table-hover-animation\" responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>№</th>\r\n                                <th>Проекты</th>\r\n                                <th>Картинка</th>\r\n                                <th>Действия</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post?.map((el, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <th scope=\"row\">{index + 1}</th>\r\n                                        <td>{findProject(el)}</td>\r\n                                        <td>\r\n                                            {' '}\r\n                                            <img\r\n                                                src={el.image}\r\n                                                alt=\"img-news\"\r\n                                                className=\"img__news\"\r\n                                            />{' '}\r\n                                        </td>\r\n                                        <td>\r\n                                            <div className=\"d-flex\">\r\n                                                <Icon.Edit\r\n                                                    size={20}\r\n                                                    outline\r\n                                                    id=\"positionTop\"\r\n                                                    onClick={() => {\r\n                                                        setModalEdit(true)\r\n                                                        setProject(el)\r\n                                                    }}\r\n                                                />\r\n                                                <UncontrolledTooltip\r\n                                                    placement=\"top\"\r\n                                                    target=\"positionTop\"\r\n                                                >\r\n                                                    Изменить\r\n                                                </UncontrolledTooltip>\r\n                                                <Icon.Trash2\r\n                                                    size={20}\r\n                                                    className=\"ml-2\"\r\n                                                    outline\r\n                                                    id=\"positionBottom\"\r\n                                                    onClick={() => {\r\n                                                        setModal(true)\r\n                                                        setIdNews(el.id)\r\n                                                    }}\r\n                                                />\r\n                                                <UncontrolledTooltip\r\n                                                    placement=\"bottom\"\r\n                                                    target=\"positionBottom\"\r\n                                                >\r\n                                                    Удалить\r\n                                                </UncontrolledTooltip>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                </CardBody>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport Breadcrumbs from '../../../breadCrumbs/BreadCrumb'\r\nimport DataTableCustom from './DataTableCustom'\r\n\r\nclass DataTables extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Breadcrumbs\r\n                    breadCrumbTitle=\"Слайдер\"\r\n                    breadCrumbParent=\"Главная\"\r\n                    breadCrumbActive=\"Слайдер\"\r\n                />\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <DataTableCustom />\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataTables\r\n","import React from 'react'\r\nimport Main from '../../components/@vuexy/projects/tables/slider/DataTables'\r\n\r\nexport default function Projects() {\r\n    return (\r\n        <>\r\n            <Main />\r\n        </>\r\n    )\r\n}\r\n"],"sourceRoot":""}