{"version":3,"sources":["components/@vuexy/projects/tables/contacts/ModalWarning.js","components/@vuexy/projects/tables/contacts/ModalAdd.js","components/@vuexy/projects/tables/contacts/ModalEdit.js","components/@vuexy/projects/tables/contacts/DataTableCustom.js","components/@vuexy/projects/tables/contacts/DataTables.js","views/pages/Pr_contacts.js"],"names":["ModalWarning","show","closeModal","id","deleteProjects","toggleModal","submitForm","e","http","delete","then","res","txt","toast","success","catch","errors","message","warning","Modal","isOpen","toggle","className","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","formSchema","Yup","shape","required","minlength","min","maxlength","max","ModalAdd","closeModalAdd","addProjects","projects","useState","files","setFiles","image","project_id","adress","phone","email","url","post","setPost","editorState","EditorState","createEmpty","useDropzone","accept","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","preventDefault","data","FormData","append","response","error","key","name","src","alt","useEffect","forEach","revokeObjectURL","initialValues","date","validationSchema","touched","onSubmit","Card","CardBody","FormGroup","Label","for","CustomInput","type","onChange","target","value","el","index","title","Ripple","ModalEdit","closeModalEdit","editProjects","project","put","Index","setProjects","modal","setModal","modalAdd","setModalAdd","modalEdit","setModalEdit","setProject","idNews","setIdNews","get","pr_layouts","findIndex","element","splice","act","prevState","CardHeader","CardTitle","Table","responsive","scope","item","findProject","href","size","outline","UncontrolledTooltip","placement","DataTables","Fragment","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","sm","React","Component","Projects"],"mappings":"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","file":"static/js/29.692dde7d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\nimport http from '../../../../../http'\r\nimport { toast } from 'react-toastify'\r\n\r\nexport default function ModalWarning({ show, closeModal, id, deleteProjects }) {\r\n    const notifyWarning = (txt) => toast.warning(txt)\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModal(false)\r\n        }\r\n        closeModal(true)\r\n    }\r\n    const submitForm = (e) => {\r\n        deleteProjects(id)\r\n        http.delete(`pr_contact/delete/${id}`)\r\n            .then((res) => {\r\n                notifySuccess('Контакт успешно удален!')\r\n            })\r\n            .catch(function (errors) {\r\n                notifyWarning(`Ошибка: ${errors.message}`)\r\n            })\r\n    }\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-danger\">\r\n                    Внимание\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    Вы уверены, что хотите удалить этот проект?\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"danger\"\r\n                        onClick={(e) => {\r\n                            submitForm(e)\r\n                            toggleModal()\r\n                        }}\r\n                    >\r\n                        Удалить\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Card,\r\n    CardHeader,\r\n    CardTitle,\r\n    CardBody,\r\n    FormGroup,\r\n    Label,\r\n    CustomInput,\r\n} from 'reactstrap'\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport { Formik, Field, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport '../../../../../assets/scss/plugins/extensions/editor.scss'\r\nimport '../../../../../assets/scss/plugins/extensions/dropzone.scss'\r\nimport http from '../../../../../http'\r\nimport FormData from 'form-data'\r\nimport { toast } from 'react-toastify'\r\n\r\nconst formSchema = Yup.object().shape({\r\n    required: Yup.string().required('Required'),\r\n    minlength: Yup.string().min(4, 'Too Short!').required('Required'),\r\n    maxlength: Yup.string().max(5, 'Too Long!').required('Required'),\r\n})\r\n\r\nexport default function ModalAdd({\r\n    show,\r\n    closeModalAdd,\r\n    addProjects,\r\n    projects,\r\n}) {\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const notifyError = (txt) => toast.error(txt)\r\n    const [files, setFiles] = useState([])\r\n    const [preloadImg, setpreloadImg] = useState({ image: null })\r\n\r\n    const [post, setPost] = useState({\r\n        project_id: null,\r\n        adress: null,\r\n        phone: null,\r\n        email: null,\r\n        url: null,\r\n    })\r\n\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModalAdd(false)\r\n        }\r\n        closeModalAdd(true)\r\n    }\r\n\r\n    const [edit, setEdit] = useState({\r\n        editorState: EditorState.createEmpty(),\r\n    })\r\n\r\n    const handleFileInput = (e) => {\r\n        setPost({ ...post, file: e.target.files[0] })\r\n        if (e.target.files && e.target.files[0]) {\r\n            let img = e.target.files[0]\r\n            setpreloadImg({\r\n                image: URL.createObjectURL(img),\r\n            })\r\n        }\r\n    }\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        accept: 'image/*',\r\n        onDrop: (acceptedFiles) => {\r\n            setFiles(\r\n                acceptedFiles.map((file) =>\r\n                    Object.assign(file, {\r\n                        preview: URL.createObjectURL(file),\r\n                    })\r\n                )\r\n            )\r\n        },\r\n    })\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        const data = new FormData()\r\n        data.append('project_id', post.project_id)\r\n        data.append('adress', post.adress)\r\n        data.append('phone', post.phone)\r\n        data.append('email', post.email)\r\n        data.append('url', post.url)\r\n        http.post('pr_contact/create', data)\r\n            .then((response) => {\r\n                toggleModal()\r\n                addProjects(post)\r\n                notifySuccess('Контакт был успешно добавлен!')\r\n            })\r\n            .catch(function (errors) {\r\n                notifyError(`Упс, ошибка , ${errors.message}`)\r\n            })\r\n    }\r\n    const thumbs = files.map((file) => (\r\n        <div className=\"dz-thumb\" key={file.name}>\r\n            <div className=\"dz-thumb-inner\">\r\n                <img src={file.preview} className=\"dz-img\" alt={file.name} />\r\n            </div>\r\n        </div>\r\n    ))\r\n\r\n    useEffect(\r\n        () => () => {\r\n            // Make sure to revoke the data uris to avoid memory leaks\r\n            files.forEach((file) => URL.revokeObjectURL(file.preview))\r\n        },\r\n        [files]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered modal-lg\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-primary\">\r\n                    Добавление проекта\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            required: '',\r\n                            name: '',\r\n                            date: '',\r\n                            minlength: '',\r\n                            maxlength: '',\r\n                        }}\r\n                        validationSchema={formSchema}\r\n                    >\r\n                        {({ errors, touched }) => (\r\n                            <Form className=\"w-100\" onSubmit={submitForm}>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Жилой комплекс\r\n                                            </Label>\r\n                                            <CustomInput\r\n                                                type=\"select\"\r\n                                                name=\"select\"\r\n                                                id=\"city\"\r\n                                                onChange={(e) => {\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        project_id:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                <option value=\"\"></option>\r\n                                                {projects?.map((el, index) => {\r\n                                                    return (\r\n                                                        <option\r\n                                                            value={el.id}\r\n                                                            key={index}\r\n                                                        >\r\n                                                            {el.title}\r\n                                                        </option>\r\n                                                    )\r\n                                                })}\r\n                                            </CustomInput>\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">Адресс</Label>\r\n                                            <Field\r\n                                                name=\"url\"\r\n                                                id=\"required\"\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        adress: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                E-mail(почта)\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"url\"\r\n                                                id=\"required\"\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        email: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Ссылка на карту\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"url\"\r\n                                                id=\"required\"\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        url: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Телефон\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"url\"\r\n                                                id=\"required\"\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        phone: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    className=\"mt-2\"\r\n                                >\r\n                                    Добавить\r\n                                </Button.Ripple>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </ModalBody>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Card,\r\n    CustomInput,\r\n    CardBody,\r\n    FormGroup,\r\n    Label,\r\n} from 'reactstrap'\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport { Formik, Field, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport '../../../../../assets/scss/plugins/extensions/editor.scss'\r\nimport '../../../../../assets/scss/plugins/extensions/dropzone.scss'\r\nimport http from '../../../../../http'\r\nimport FormData from 'form-data'\r\nimport { toast } from 'react-toastify'\r\nimport htmlToDraft from 'html-to-draftjs'\r\n\r\nconst formSchema = Yup.object().shape({\r\n    required: Yup.string().required('Required'),\r\n    minlength: Yup.string().min(4, 'Too Short!').required('Required'),\r\n    maxlength: Yup.string().max(5, 'Too Long!').required('Required'),\r\n})\r\n\r\nexport default function ModalEdit({\r\n    show,\r\n    closeModalEdit,\r\n    editProjects,\r\n    project,\r\n    projects,\r\n}) {\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const notifyError = (txt) => toast.error(txt)\r\n    const [post, setPost] = useState({\r\n        id: null,\r\n        project_id: null,\r\n        adress: null,\r\n        phone: null,\r\n        email: null,\r\n        url: null,\r\n    })\r\n\r\n    useEffect(() => {\r\n        setPost({\r\n            id: project.id,\r\n            project_id: project.project_id,\r\n            adress: project.adress,\r\n            phone: project.phone,\r\n            email: project.email,\r\n            url: project.url,\r\n        })\r\n    }, [project])\r\n\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModalEdit(false)\r\n        }\r\n        closeModalEdit(true)\r\n    }\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        const data = new FormData()\r\n        data.append('project_id', post.project_id)\r\n        data.append('adress', post.adress)\r\n        data.append('phone', post.phone)\r\n        data.append('email', post.email)\r\n        data.append('url', post.url)\r\n        http.put(`pr_contact/update/${post.id}`, data)\r\n            .then((response) => {\r\n                editProjects(post)\r\n                toggleModal()\r\n                notifySuccess('Контакт успешно изменен!')\r\n            })\r\n            .catch(function (errors) {\r\n                notifyError(`О нет ошибка , ${errors.message}`)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered modal-lg\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-primary\">\r\n                    Редактирование проекта\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            required: '',\r\n                            name: '',\r\n                            date: '',\r\n                            minlength: '',\r\n                            maxlength: '',\r\n                        }}\r\n                        validationSchema={formSchema}\r\n                    >\r\n                        {({ errors, touched }) => (\r\n                            <Form className=\"w-100\" onSubmit={submitForm}>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Жилой комплекс\r\n                                            </Label>\r\n                                            <CustomInput\r\n                                                type=\"select\"\r\n                                                name=\"select\"\r\n                                                id=\"city\"\r\n                                                onChange={(e) => {\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        project_id:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                <option value=\"\"></option>\r\n                                                {projects?.map((el, index) => {\r\n                                                    return (\r\n                                                        <option\r\n                                                            value={el.id}\r\n                                                            key={index}\r\n                                                        >\r\n                                                            {el.title}\r\n                                                        </option>\r\n                                                    )\r\n                                                })}\r\n                                            </CustomInput>\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">Адресс</Label>\r\n                                            <Field\r\n                                                name=\"url\"\r\n                                                id=\"required\"\r\n                                                value={post.adress}\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        adress: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                E-mail(почта)\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"url\"\r\n                                                id=\"required\"\r\n                                                value={post.email}\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        email: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Ссылка на карту\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"url\"\r\n                                                id=\"required\"\r\n                                                value={post.url}\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        url: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Телефон\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"url\"\r\n                                                id=\"required\"\r\n                                                value={post.phone}\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        phone: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                    </CardBody>\r\n                                </Card>\r\n\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    className=\"mt-2\"\r\n                                >\r\n                                    Изменить\r\n                                </Button.Ripple>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </ModalBody>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Table,\r\n    Input,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    CardTitle,\r\n    UncontrolledTooltip,\r\n} from 'reactstrap'\r\nimport { Search } from 'react-feather'\r\nimport * as Icon from 'react-feather'\r\nimport ModalWarning from './ModalWarning'\r\nimport ModalAdd from './ModalAdd'\r\nimport ModalEdit from './ModalEdit'\r\nimport http from '../../../../../http'\r\nimport { Link } from 'react-router-dom'\r\nimport { toast } from 'react-toastify'\r\nimport Tst from '../../../toastify/Toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport '../../../../../assets/scss/plugins/extensions/toastr.scss'\r\nimport './Index.css'\r\n\r\nexport default function Index() {\r\n    const [post, setPost] = useState([])\r\n    const [projects, setProjects] = useState([])\r\n    const [searchPost, setSearchPost] = useState('')\r\n    const [modal, setModal] = useState(false)\r\n    const [modalAdd, setModalAdd] = useState(false)\r\n    const [modalEdit, setModalEdit] = useState(false)\r\n    const [project, setProject] = useState([])\r\n    const [idNews, setIdNews] = useState()\r\n\r\n    useEffect(() => {\r\n        http.get('/pr_contact').then((res) => {\r\n            setPost(res.data.pr_layouts)\r\n        })\r\n        http.get('/projects').then((res) => {\r\n            setProjects(res.data.projects)\r\n        })\r\n    }, [])\r\n\r\n    const closeModal = (act) => {\r\n        setModal(false)\r\n    }\r\n\r\n    const addProjects = (el) => {\r\n        setPost((prevState) => [...prevState, { el }])\r\n    }\r\n\r\n    const handleSearchValue = (e) => {\r\n        setSearchPost(e.target.value)\r\n    }\r\n\r\n    const editProjects = (el) => {\r\n        let index = post.findIndex((element) => element.id === el.id)\r\n        post[index].project_id = el.project_id\r\n        post[index].adress = el.adress\r\n        post[index].phone = el.phone\r\n        post[index].email = el.email\r\n        post[index].url = el.url\r\n    }\r\n\r\n    const deleteProjects = (id) => {\r\n        let res = post.findIndex((element) => element.id === id)\r\n        post.splice(res, 1)\r\n    }\r\n\r\n    const closeModalAdd = (act) => {\r\n        setModalAdd(false)\r\n    }\r\n    const closeModalEdit = (act) => {\r\n        setModalEdit(false)\r\n    }\r\n\r\n    const findProject = (el) => {\r\n        return projects.map((item, index) => {\r\n            if (item.id === el.project_id) {\r\n                return <div key={index}>{item.title}</div>\r\n            }\r\n            return\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <ModalWarning\r\n                    show={modal}\r\n                    deleteProjects={deleteProjects}\r\n                    closeModal={closeModal}\r\n                    id={idNews}\r\n                />\r\n                <ModalAdd\r\n                    show={modalAdd}\r\n                    addProjects={addProjects}\r\n                    closeModalAdd={closeModalAdd}\r\n                    projects={projects}\r\n                />\r\n                <ModalEdit\r\n                    show={modalEdit}\r\n                    editProjects={editProjects}\r\n                    closeModalEdit={closeModalEdit}\r\n                    project={project}\r\n                    projects={projects}\r\n                />\r\n                <CardHeader>\r\n                    <CardTitle>Контакты</CardTitle>\r\n                </CardHeader>\r\n                <CardBody className=\"rdt_Wrapper\">\r\n                    <Tst />\r\n                    <div className=\"d-flex flex-wrap justify-content-between\">\r\n                        <div className=\"add-new\">\r\n                            <>\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                        setModalAdd(true)\r\n                                    }}\r\n                                >\r\n                                    Добавить новое\r\n                                </Button.Ripple>\r\n                            </>\r\n                        </div>\r\n                        <div className=\"position-relative has-icon-left mb-1\">\r\n                            {/* <Input onChange={handleSearchValue} />\r\n                            <div className=\"form-control-position\">\r\n                                <Search size=\"15\" />\r\n                            </div> */}\r\n                        </div>\r\n                    </div>\r\n                    <Table className=\"table-hover-animation\" responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>№</th>\r\n                                <th>Проекты</th>\r\n                                <th>Адрес</th>\r\n                                <th>Телефон</th>\r\n                                <th>E-mail</th>\r\n                                <th>Ссылка на карту</th>\r\n                                <th>Действия</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post?.map((el, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <th scope=\"row\">{index + 1}</th>\r\n                                        <td>{findProject(el)}</td>\r\n                                        <td>{el.adress} </td>\r\n                                        <td>{el.phone} </td>\r\n                                        <td>{el.email} </td>\r\n                                        <td>\r\n                                            <a href={el.url} target=\"_blanck\">\r\n                                                {el.url}\r\n                                            </a>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div className=\"d-flex\">\r\n                                                <Icon.Edit\r\n                                                    size={20}\r\n                                                    outline\r\n                                                    id=\"positionTop\"\r\n                                                    onClick={() => {\r\n                                                        setModalEdit(true)\r\n                                                        setProject(el)\r\n                                                    }}\r\n                                                />\r\n                                                <UncontrolledTooltip\r\n                                                    placement=\"top\"\r\n                                                    target=\"positionTop\"\r\n                                                >\r\n                                                    Изменить\r\n                                                </UncontrolledTooltip>\r\n                                                <Icon.Trash2\r\n                                                    size={20}\r\n                                                    className=\"ml-2\"\r\n                                                    outline\r\n                                                    id=\"positionBottom\"\r\n                                                    onClick={() => {\r\n                                                        setModal(true)\r\n                                                        setIdNews(el.id)\r\n                                                    }}\r\n                                                />\r\n                                                <UncontrolledTooltip\r\n                                                    placement=\"bottom\"\r\n                                                    target=\"positionBottom\"\r\n                                                >\r\n                                                    Удалить\r\n                                                </UncontrolledTooltip>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                </CardBody>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport Breadcrumbs from '../../../breadCrumbs/BreadCrumb'\r\nimport DataTableCustom from './DataTableCustom'\r\n\r\nclass DataTables extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Breadcrumbs\r\n                    breadCrumbTitle=\"Контакты\"\r\n                    breadCrumbParent=\"Главная\"\r\n                    breadCrumbActive=\"Контакты\"\r\n                />\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <DataTableCustom />\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataTables\r\n","import React from 'react'\r\nimport Main from '../../components/@vuexy/projects/tables/contacts/DataTables'\r\n\r\nexport default function Projects() {\r\n    return (\r\n        <>\r\n            <Main />\r\n        </>\r\n    )\r\n}\r\n"],"sourceRoot":""}