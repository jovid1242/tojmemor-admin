{"version":3,"sources":["http.js","components/@vuexy/breadCrumbs/BreadCrumb.js","components/@vuexy/pagination/Index.js","components/@vuexy/ExtensionHeader.js","components/@vuexy/toastify/ToastTypes.js","components/@vuexy/toastify/ToastPositions.js","components/@vuexy/toastify/Toastify.js","components/@vuexy/video/get-video/ModalDeleteVideo.js","components/@vuexy/video/get-video/ModalAddVideo.js","components/@vuexy/video/get-video/ModalEditVideo.js","components/@vuexy/video/get-video/Index.js","components/@vuexy/video/get-video/DataVideo.js","views/pages/Video.js"],"names":["http","axios","create","baseURL","headers","Accept","BreadCrumbs","className","this","props","breadCrumbTitle","tag","to","size","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","active","breadCrumbActive","React","Component","Index","total","currentPage","onChangeCurrentPage","useState","currentX","setCurrentX","onCurrentPage","page","updateCurrentPage","next","prev","paginatorClassName","number","data","href","disabled","onClick","first","i","push","last","paginators","map","el","ToastrPositions","Toastr","Fragment","Row","Col","sm","ModalVideoDelete","show","closeModal","id","deleteProjects","toggleModal","submitForm","e","delete","then","res","txt","toast","success","catch","errors","console","log","message","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","formSchema","Yup","shape","required","minlength","min","maxlength","max","ModalAddVideo","closeModalAdd","addVideo","image","preloadImg","setpreloadImg","files","setFiles","title","text","url","file","post","setPost","handleFileInput","target","img","URL","createObjectURL","useDropzone","accept","onDrop","acceptedFiles","Object","assign","preview","getRootProps","getInputProps","preventDefault","FormData","append","response","error","useEffect","forEach","revokeObjectURL","initialValues","name","date","validationSchema","touched","onSubmit","Card","CardBody","FormGroup","Label","for","onChange","value","src","alt","Ripple","type","ModalEditVideo","closeModalEdit","editVideo","video","urlVideo","put","key","modal","setModal","modalAdd","setModalAdd","modalEdit","setModalEdit","setVideo","idVideo","setIdVideo","pagePost","setPagePost","pagTotal","setPagTotal","get","rows","pages","onUpdateCurrentPage","a","findIndex","element","splice","act","newVideo","prevState","index","CardHeader","CardTitle","Table","responsive","scope","outline","UncontrolledTooltip","placement","DataTables","Video"],"mappings":"mJAAA,YAEMA,EAFN,OAEaC,EAAMC,OAAO,CACtBC,QAAS,qCACTC,QAAS,CACL,eAAgB,mBAChBC,OAAQ,sBAKDL,O,0LCATM,E,4JACJ,WACE,OACE,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,4CACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,UACZC,KAAKC,MAAMC,gBACV,wBAAIH,UAAU,wCACXC,KAAKC,MAAMC,iBAGd,GAEF,yBAAKH,UAAU,8DACb,kBAAC,IAAD,CAAYI,IAAI,MACd,kBAAC,IAAD,CAAgBA,IAAI,MAClB,kBAAC,IAAD,CAASC,GAAG,KACV,kBAAC,IAAD,CAAML,UAAU,YAAYM,KAAM,OAGtC,kBAAC,IAAD,CAAgBF,IAAI,KAAKJ,UAAU,gBAChCC,KAAKC,MAAMK,kBAEbN,KAAKC,MAAMM,kBACV,kBAAC,IAAD,CAAgBJ,IAAI,KAAKJ,UAAU,gBAChCC,KAAKC,MAAMM,mBAGd,GAEDP,KAAKC,MAAMO,kBACV,kBAAC,IAAD,CAAgBL,IAAI,KAAKJ,UAAU,gBAChCC,KAAKC,MAAMO,mBAGd,GAEF,kBAAC,IAAD,CAAgBL,IAAI,KAAKM,QAAM,GAC5BT,KAAKC,MAAMS,4B,GAvCNC,IAAMC,WAqFjBd,O,oJCvFA,SAASe,EAAT,GAA6D,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,oBAChD,EAA8BC,mBAASF,GAAvC,mBAAKG,EAAL,KAAeC,EAAf,KAsBMC,EAAgB,SAAAC,GAClBC,EAAkBD,IAEhBC,EAAoB,SAAAD,GAClBA,IAASH,IACbC,EAAYE,GACZL,EAAoBK,KAElBE,EAAO,WACLL,IAAaJ,GAIjBQ,EADUJ,EAAW,IAInBM,EAAO,WACQ,IAAbN,GAIJI,EADUJ,EAAW,IAInBO,EAAqB,SAAAC,GAEvB,OADgBA,IAAWR,EAAW,SAAW,IAIrD,OACI,oCACI,yBAAKnB,UAAU,cACX,wBAAIA,UAAU,mBACV,kBAAC,IAAD,CAAYA,UAAU,sCAtDnB,WAOf,IANA,IAAM4B,EAAO,CACT,kBAAC,IAAD,CAAgBC,KAAK,IAAI7B,UAAU,aAC/B,kBAAC,IAAD,CAAgB8B,SAAuB,IAAbX,EAAgBY,QAAS,WAAQN,KAAUI,KAAK,IAAIG,OAAK,GAC/E,kBAAC,IAAD,SAJS,WAOZC,GACLL,EAAKM,KACD,kBAAC,IAAD,CAAgBxB,OAAQS,IAAac,EAAI,SAAW,IAChD,kBAAC,IAAD,CAAgBjC,UAAW0B,EAAmBO,GAAIF,QAAS,WAAQV,EAAcY,IAAMJ,KAAK,KAAMI,MAHrGA,EAAI,EAAGA,GAAKlB,EAAOkB,IAAM,EAAzBA,GAYT,OANAL,EAAKM,KACD,kBAAC,IAAD,CAAgBL,KAAK,IAAI7B,UAAU,aAC/B,kBAAC,IAAD,CAAgB8B,SAAUX,IAAaJ,EAAOgB,QAAS,WAAQP,KAAUK,KAAK,IAAIM,MAAI,GAClF,kBAAC,IAAD,SAGLP,EAoCUQ,GAAaC,KAAI,SAAAC,GAAE,OAAIA,W,gIC9DjB1B,IAAMC,U,qDCAhBD,IAAMC,UCAZ,SAAS0B,IAKtB,OACE,yBAAKvC,UAAU,6B,kBCDbwC,E,4JACJ,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACN,kBAACL,EAAD,OAEF,kBAAC,IAAD,Y,GARW3B,IAAMC,WAeZ2B,O,4XCnBA,SAASK,EAAT,GAKX,IAJAC,EAID,EAJCA,KACAC,EAGD,EAHCA,WACAC,EAED,EAFCA,GACAC,EACD,EADCA,eAGMC,EAAc,WACZJ,GACAC,GAAW,GAEfA,GAAW,IAETI,EAAa,SAACC,GAChBH,EAAeD,GACfvD,IAAK4D,OAAL,wBAA6BL,IACxBM,MAAK,SAACC,GAVO,IAACC,IAWG,wHAXKC,IAAMC,QAAQF,MAapCG,OAAM,SAAUC,GACbC,QAAQC,IAAI,uCAAZ,UAAyBF,EAAOG,cAG5C,OACI,oCACI,kBAACC,EAAA,EAAD,CACIC,OAAQnB,EACRoB,OAAQhB,EACRlD,UAAU,yBAEV,kBAACmE,EAAA,EAAD,CAAaD,OAAQhB,EAAalD,UAAU,aAA5C,oDAGA,kBAACoE,EAAA,EAAD,CAAWpE,UAAU,yBAArB,8NAGA,kBAACqE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,SACNxC,QAAS,SAACqB,GACND,IACAD,MAJR,iD,wHChBdsB,EAAaC,MAAaC,MAAM,CAClCC,SAAUF,MAAaE,SAAS,YAChCC,UAAWH,MAAaI,IAAI,EAAG,cAAcF,SAAS,YACtDG,UAAWL,MAAaM,IAAI,EAAG,aAAaJ,SAAS,cAG1C,SAASK,EAAT,GAA2D,IAAlClC,EAAiC,EAAjCA,KAAMmC,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,SAGzD,EAAoChE,mBAAS,CAAEiE,MAAO,OAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BnE,mBAAS,IAAnC,mBAAOoE,EAAP,KAAcC,EAAd,KACA,EAAwBrE,mBAAS,CAC7BsE,MAAO,KACPC,KAAM,KACNC,IAAK,KACLC,KAAM,OAJV,mBAAOC,EAAP,KAAaC,EAAb,KAOM3C,EAAc,WACZJ,GACAmC,GAAc,GAElBA,GAAc,IAGZa,EAAkB,SAAC1C,GAErB,GADAyC,EAAQ,2BAAKD,GAAN,IAAYD,KAAMvC,EAAE2C,OAAOT,MAAM,MACpClC,EAAE2C,OAAOT,OAASlC,EAAE2C,OAAOT,MAAM,GAAI,CACrC,IAAIU,EAAM5C,EAAE2C,OAAOT,MAAM,GACzBD,EAAc,CACVF,MAAOc,IAAIC,gBAAgBF,OAKvC,EAAwCG,YAAY,CAChDC,OAAQ,UACRC,OAAQ,SAACC,GACLf,EACIe,EAAcjE,KAAI,SAACsD,GAAD,OACdY,OAAOC,OAAOb,EAAM,CAChBc,QAASR,IAAIC,gBAAgBP,YANzCe,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAahBxD,EAAa,SAACC,GAChBA,EAAEwD,iBACF,IAAMhF,EAAO,IAAIiF,IACjBjF,EAAKkF,OAAO,QAASlB,EAAKJ,OAC1B5D,EAAKkF,OAAO,OAAQlB,EAAKH,MACzB7D,EAAKkF,OAAO,WAAYlB,EAAKF,KAC7B9D,EAAKkF,OAAO,QAASlB,EAAKD,MAE1BlG,IAAKmG,KAAK,gBAAiBhE,GACtB0B,MAAK,SAACyD,GAlDO,IAACvD,EAmDX0B,EAASU,EAAMR,EAAWD,OAC1BjC,IApDWM,EAqDG,8HArDKC,IAAMC,QAAQF,MAuDpCG,OAAM,SAAUC,GAtDL,IAACJ,IAuDG,oEAAD,OAAmBI,EAAOG,SAvDpBN,IAAMuD,MAAMxD,OA0EzC,OARAyD,qBACI,kBAAM,WAEF3B,EAAM4B,SAAQ,SAACvB,GAAD,OAAUM,IAAIkB,gBAAgBxB,EAAKc,eAErD,CAACnB,IAID,oCACI,kBAACtB,EAAA,EAAD,CACIC,OAAQnB,EACRoB,OAAQhB,EACRlD,UAAU,kCAEV,kBAACmE,EAAA,EAAD,CAAaD,OAAQhB,EAAalD,UAAU,cAA5C,mFAGA,kBAACoE,EAAA,EAAD,CAAWpE,UAAU,yBACjB,kBAAC,IAAD,CACIoH,cAAe,CACXzC,SAAU,GACV0C,KAAM,GACNC,KAAM,GACN1C,UAAW,GACXE,UAAW,IAEfyC,iBAAkB/C,IAEjB,gBAAGZ,EAAH,EAAGA,OAAQ4D,EAAX,EAAWA,QAAX,OACG,kBAAC,IAAD,CAAMxH,UAAU,QAAQyH,SAAUtE,GAC9B,kBAACuE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAU3H,UAAU,eAChB,kBAAC4H,EAAA,EAAD,CAAW5H,UAAU,QACjB,kBAAC6H,EAAA,EAAD,CAAOC,IAAI,YAAX,0DAGA,kBAAC,IAAD,CACIT,KAAK,QACLrE,GAAG,WACH+E,SAAU,SAAC3E,GAAD,OACNyC,EAAQ,2BACDD,GADA,IAEHJ,MAAOpC,EAAE2C,OAAOiC,UAGxBhI,UAAS,uBACL4D,EAAOe,UACP6C,EAAQ7C,UACR,gBAGPf,EAAOe,UACR6C,EAAQ7C,SACJ,yBAAK3E,UAAU,yBACV4D,EAAOe,UAEZ,MAER,kBAACiD,EAAA,EAAD,CAAW5H,UAAU,QACjB,kBAAC6H,EAAA,EAAD,CAAOC,IAAI,YAAX,oDAGA,kBAAC,IAAD,CACIT,KAAK,OACLrE,GAAG,WACH+E,SAAU,SAAC3E,GAAD,OACNyC,EAAQ,2BACDD,GADA,IAEHH,KAAMrC,EAAE2C,OAAOiC,UAGvBhI,UAAS,uBACL4D,EAAOe,UACP6C,EAAQ7C,UACR,gBAGPf,EAAOe,UACR6C,EAAQ7C,SACJ,yBAAK3E,UAAU,yBACV4D,EAAOe,UAEZ,MAER,kBAACiD,EAAA,EAAD,CAAW5H,UAAU,QACjB,kBAAC6H,EAAA,EAAD,CAAOC,IAAI,YAAX,oFAGA,kBAAC,IAAD,CACIT,KAAK,QACLrE,GAAG,WACH+E,SAAU,SAAC3E,GAAD,OACNyC,EAAQ,2BACDD,GADA,IAEHF,IAAKtC,EAAE2C,OAAOiC,UAGtBhI,UAAS,uBACL4D,EAAOe,UACP6C,EAAQ7C,UACR,gBAGPf,EAAOe,UACR6C,EAAQ7C,SACJ,yBAAK3E,UAAU,yBACV4D,EAAOe,UAEZ,QAIhB,kBAAC+C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAU3H,UAAU,eAChB,iCACI,wBACQ0G,EAAa,CACb1G,UAAW,aAGf,2CACQ2G,IADR,CAEIoB,SAAUjC,KAEd,uBAAG9F,UAAU,QAAb,2RAKJ,2BAAOA,UAAU,mBACb,yBAAKA,UAAU,YACX,yBAAKA,UAAU,kBAEX,OADCoF,EAAWD,MAER,yBACI8C,IACI7C,EAAWD,MAEfnF,UAAU,SACVkI,IAAI,OAER,WAO5B,kBAAC5D,EAAA,EAAO6D,OAAR,CACI5D,MAAM,UACN6D,KAAK,SACLpI,UAAU,QAHd,2DClOhC,IAAMwE,EAAaC,MAAaC,MAAM,CAClCC,SAAUF,MAAaE,SAAS,YAChCC,UAAWH,MAAaI,IAAI,EAAG,cAAcF,SAAS,YACtDG,UAAWL,MAAaM,IAAI,EAAG,aAAaJ,SAAS,cAG1C,SAAS0D,EAAT,GAKX,IAJAvF,EAID,EAJCA,KACAwF,EAGD,EAHCA,eACAC,EAED,EAFCA,UACAC,EACD,EADCA,MAIA,EAAoCtH,mBAAS,CAAEiE,MAAO,OAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BnE,mBAAS,IAAnC,mBAAOoE,EAAP,KAAcC,EAAd,KAEA,EAAwBrE,mBAAS,CAC7B8B,GAAI,KACJwC,MAAO,KACPC,KAAM,KACNC,IAAK,KACLC,KAAM,OALV,mBAAOC,EAAP,KAAaC,EAAb,KAQAoB,qBAAU,WACNpB,EAAQ,CACJ7C,GAAIwF,EAAMxF,GACV0C,IAAK8C,EAAMC,SACXjD,MAAOgD,EAAMhD,MACbC,KAAM+C,EAAM/C,KACZE,KAAM6C,EAAMrD,QAEhBE,EAAc,CAAEF,MAAOqD,EAAMrD,UAC9B,CAACqD,IAEJ,IAAMtF,EAAc,WACZJ,GACAwF,GAAe,GAEnBA,GAAe,IAGbxC,EAAkB,SAAC1C,GAErB,GADAyC,EAAQ,2BAAKD,GAAN,IAAYD,KAAMvC,EAAE2C,OAAOT,MAAM,MACpClC,EAAE2C,OAAOT,OAASlC,EAAE2C,OAAOT,MAAM,GAAI,CACrC,IAAIU,EAAM5C,EAAE2C,OAAOT,MAAM,GACzBD,EAAc,CACVF,MAAOc,IAAIC,gBAAgBF,OAKvC,EAAwCG,YAAY,CAChDC,OAAQ,UACRC,OAAQ,SAACC,GACLf,EACIe,EAAcjE,KAAI,SAACsD,GAAD,OACdY,OAAOC,OAAOb,EAAM,CAChBc,QAASR,IAAIC,gBAAgBP,YANzCe,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAahBxD,EAAa,SAACC,GAChBA,EAAEwD,iBACF,IAAMhF,EAAO,IAAIiF,IACjBjF,EAAKkF,OAAO,QAASlB,EAAKJ,OAC1B5D,EAAKkF,OAAO,OAAQlB,EAAKH,MACzB7D,EAAKkF,OAAO,WAAYlB,EAAKF,KAC7B9D,EAAKkF,OAAO,QAASlB,EAAKD,MAC1BlG,IAAKiJ,IAAL,wBAA0BF,EAAMxF,IAAMpB,GACjC0B,MAAK,SAACyD,GA9DO,IAACvD,EA+DX+E,EAAU3C,EAAMR,EAAWD,OA/DhB3B,EAgEG,8HAhEKC,IAAMC,QAAQF,GAiEjCN,OAEHS,OAAM,SAAUC,GAlEL,IAACJ,IAmEG,oEAAD,OAAmBI,EAAOG,SAnEpBN,IAAMuD,MAAMxD,OAuE1B8B,EAAMjD,KAAI,SAACsD,GAAD,OACrB,yBAAK3F,UAAU,WAAW2I,IAAKhD,EAAK0B,MAChC,yBAAKrH,UAAU,kBACX,yBAAKiI,IAAKtC,EAAKc,QAASzG,UAAU,SAASkI,IAAKvC,EAAK0B,YAajE,OARAJ,qBACI,kBAAM,WAEF3B,EAAM4B,SAAQ,SAACvB,GAAD,OAAUM,IAAIkB,gBAAgBxB,EAAKc,eAErD,CAACnB,IAID,oCACI,kBAACtB,EAAA,EAAD,CACIC,OAAQnB,EACRoB,OAAQhB,EACRlD,UAAU,kCAEV,kBAACmE,EAAA,EAAD,CAAaD,OAAQhB,EAAalD,UAAU,cAA5C,uHAGA,kBAACoE,EAAA,EAAD,CAAWpE,UAAU,yBACjB,kBAAC,IAAD,CACIoH,cAAe,CACXzC,SAAU,GACV0C,KAAM,GACNC,KAAM,GACN1C,UAAW,GACXE,UAAW,IAEfyC,iBAAkB/C,IAEjB,gBAAGZ,EAAH,EAAGA,OAAQ4D,EAAX,EAAWA,QAAX,OACG,kBAAC,IAAD,CAAMxH,UAAU,QAAQyH,SAAUtE,GAC9B,kBAACuE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAU3H,UAAU,eAChB,kBAAC4H,EAAA,EAAD,CAAW5H,UAAU,QACjB,kBAAC6H,EAAA,EAAD,CAAOC,IAAI,YAAX,0DAGA,kBAAC,IAAD,CACIT,KAAK,QACLrE,GAAG,WACHgF,MAAOpC,EAAKJ,MACZuC,SAAU,SAAC3E,GAAD,OACNyC,EAAQ,2BACDD,GADA,IAEHJ,MAAOpC,EAAE2C,OAAOiC,UAGxBhI,UAAS,uBACL4D,EAAOe,UACP6C,EAAQ7C,UACR,gBAGPf,EAAOe,UACR6C,EAAQ7C,SACJ,yBAAK3E,UAAU,yBACV4D,EAAOe,UAEZ,MAER,kBAACiD,EAAA,EAAD,CAAW5H,UAAU,QACjB,kBAAC6H,EAAA,EAAD,CAAOC,IAAI,YAAX,oDAGA,kBAAC,IAAD,CACIT,KAAK,QACLrE,GAAG,WACHgF,MAAOpC,EAAKH,KACZsC,SAAU,SAAC3E,GAAD,OACNyC,EAAQ,2BACDD,GADA,IAEHH,KAAMrC,EAAE2C,OAAOiC,UAGvBhI,UAAS,uBACL4D,EAAOe,UACP6C,EAAQ7C,UACR,gBAGPf,EAAOe,UACR6C,EAAQ7C,SACJ,yBAAK3E,UAAU,yBACV4D,EAAOe,UAEZ,MAER,kBAACiD,EAAA,EAAD,CAAW5H,UAAU,QACjB,kBAAC6H,EAAA,EAAD,CAAOC,IAAI,YAAX,oFAGA,kBAAC,IAAD,CACIT,KAAK,MACLrE,GAAG,WACHgF,MAAOpC,EAAK6C,SACZV,SAAU,SAAC3E,GAAD,OACNyC,EAAQ,2BACDD,GADA,IAEHF,IAAKtC,EAAE2C,OAAOiC,UAGtBhI,UAAS,uBACL4D,EAAOe,UACP6C,EAAQ7C,UACR,gBAGPf,EAAOe,UACR6C,EAAQ7C,SACJ,yBAAK3E,UAAU,yBACV4D,EAAOe,UAEZ,QAIhB,kBAAC+C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAU3H,UAAU,eAChB,iCACI,wBACQ0G,EAAa,CACb1G,UAAW,aAGf,2CACQ2G,IADR,CAEIoB,SAAUjC,KAEd,uBAAG9F,UAAU,QAAb,2RAKJ,2BAAOA,UAAU,mBACb,yBAAKA,UAAU,YACX,yBAAKA,UAAU,kBAEX,OADCoF,EAAWD,MAER,yBACI8C,IACI7C,EAAWD,MAEfnF,UAAU,SACVkI,IAAI,OAER,WAO5B,kBAAC5D,EAAA,EAAO6D,OAAR,CACI5D,MAAM,UACN6D,KAAK,SACLpI,UAAU,QAHd,2D,kDCjPjB,SAASc,IACpB,MAAwBI,mBAAS,IAAjC,mBAAO0E,EAAP,KAAaC,EAAb,KACA,EAA0B3E,oBAAS,GAAnC,mBAAO0H,EAAP,KAAcC,EAAd,KACA,EAAgC3H,oBAAS,GAAzC,mBAAO4H,EAAP,KAAiBC,EAAjB,KACA,EAAkC7H,oBAAS,GAA3C,mBAAO8H,EAAP,KAAkBC,EAAlB,KACA,EAA0B/H,mBAAS,IAAnC,mBAAOsH,EAAP,KAAcU,EAAd,KACA,EAA8BhI,qBAA9B,mBAAOiI,EAAP,KAAgBC,EAAhB,KAyCA,EAAgClI,mBAAS,GAAzC,mBAAOmI,EAAP,KAAiBC,EAAjB,KACA,EAAgCpI,qBAAhC,mBAAOqI,EAAP,KAAiBC,EAAjB,KACAvC,qBAAU,WACNxH,IAAKgK,IAAL,yBAA2BJ,IAAY/F,MAAK,SAACyD,GACzClB,EAAQkB,EAASnF,KAAK4G,MAAMkB,MAC5BF,EAAYzC,EAASnF,KAAK+H,YAE/B,CAACN,IAEJ,IAAMO,EAAmB,uCAAG,WAAOtI,GAAP,SAAAuI,EAAA,sEAClBP,EAAYhI,GADM,OAExBuC,QAAQC,IAAI,eAAgBxC,GAFJ,2CAAH,sDAKzB,OACI,oCACI,kBAACoG,EAAA,EAAD,KACI,kBAAC,EAAD,CACI5E,KAAM8F,EACN3F,eAhCO,SAACD,GACpB,IAAIO,EAAMqC,EAAKkE,WAAU,SAACC,GAAD,OAAaA,EAAQ/G,KAAOA,KACrD4C,EAAKoE,OAAOzG,EAAK,GACjBM,QAAQC,IAAI,MAAOP,EAAK,OAAQqC,IA8BpB7C,WA3DG,SAACkH,GAChBpB,GAAS,IA2DG7F,GAAImG,IAER,kBAAC,EAAD,CACIrG,KAAMgG,EACN5D,SA5DC,SAAC5C,EAAI0D,GAClB,IAAMkE,EAAW,CACb1E,MAAOlD,EAAGkD,MACVC,KAAMnD,EAAGmD,KACTgD,SAAUnG,EAAGoD,IACbP,MAAOa,GAEXH,GAAQ,SAACsE,GAAD,4BAAmBA,GAAnB,CAA8BD,QAsD1BjF,cAjCM,SAACgF,GACnBlB,GAAY,MAkCJ,kBAAC,EAAD,CACIjG,KAAMkG,EACNT,UAvDE,SAACjG,EAAI0D,GACnB,IAAIoE,EAAQxE,EAAKkE,WAAU,SAACC,GAAD,OAAaA,EAAQ/G,KAAOV,EAAGU,MAC1D4C,EAAKwE,GAAO5E,MAAQlD,EAAGkD,MACvBI,EAAKwE,GAAO3E,KAAOnD,EAAGmD,KACtBG,EAAKwE,GAAO3B,SAAWnG,EAAGoD,IAEtBE,EAAKwE,GAAOjF,MADJ,OAARa,EACoB1D,EAAGqD,KAEHK,GAgDZsC,eAnCO,SAAC2B,GACpBhB,GAAa,IAmCDT,MAAOA,IAEX,kBAAC6B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,wCAEJ,kBAAC3C,EAAA,EAAD,CAAU3H,UAAU,eAChB,kBAAC,IAAD,MACA,yBAAKA,UAAU,iDACX,yBAAKA,UAAU,WACX,oCACI,kBAACsE,EAAA,EAAO6D,OAAR,CACI5D,MAAM,UACNxC,QAAS,WACLgH,GAAY,KAHpB,sFAWZ,kBAACwB,EAAA,EAAD,CAAOvK,UAAU,wBAAwBwK,YAAU,GAC/C,+BACI,4BACI,sCACA,kGACA,sFACA,8DACA,gHACA,kFAGR,sCACK5E,QADL,IACKA,OADL,EACKA,EAAMvD,KAAI,SAACC,EAAI8H,GACZ,OACI,wBAAIzB,IAAKyB,GACL,wBAAIK,MAAM,OAAOL,EAAQ,GACzB,4BACI,yBACInC,IAAK3F,EAAG6C,MACR+C,IAAI,WACJlI,UAAU,eAGlB,4BAAKsC,EAAGkD,OACR,4BAAKlD,EAAGmD,MACR,4BAAKnD,EAAGmG,UACR,4BACI,yBAAKzI,UAAU,UACX,kBAAC,IAAD,CACIM,KAAM,GACNoK,SAAO,EACP1H,GAAG,cACHjB,QAAS,WACLkH,GAAa,GACbC,EAAS5G,MAGjB,kBAACqI,EAAA,EAAD,CACIC,UAAU,MACV7E,OAAO,eAFX,oDAMA,kBAAC,IAAD,CACIzF,KAAM,GACNN,UAAU,OACV0K,SAAO,EACP1H,GAAG,iBACHjB,QAAS,WACL8G,GAAS,GACTO,EAAW9G,EAAGU,OAGtB,kBAAC2H,EAAA,EAAD,CACIC,UAAU,SACV7E,OAAO,kBAFX,sDAa5B,kBAAC,IAAD,CACIhF,MAAOwI,EACPvI,YAAaqI,EACbpI,oBAAqB2I,O,IC3K9BiB,E,4JAlBX,WACI,OACI,kBAAC,IAAMpI,SAAP,KACI,kBAAC,IAAD,CACItC,gBAAgB,iCAChBI,iBAAiB,6CACjBI,iBAAiB,mCAErB,kBAAC+B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACJ,kBAAC,EAAD,a,GAXChC,IAAMC,WCFhB,SAASiK,IACpB,OACI,oCACI,kBAAC,EAAD","file":"static/js/16.2e681f13.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst http = axios.create({\r\n    baseURL: 'http://tojbackend.web.bobo.tj/api/',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n    },\r\n})\r\n\r\n\r\nexport default http\r\n","import React from \"react\"\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from \"reactstrap\"\r\nimport { Home, Settings } from \"react-feather\"\r\nimport { NavLink } from \"react-router-dom\"\r\nclass BreadCrumbs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"content-header row\">\r\n        <div className=\"content-header-left col-md-9 col-12 mb-2\">\r\n          <div className=\"row breadcrumbs-top\">\r\n            <div className=\"col-12\">\r\n              {this.props.breadCrumbTitle ? (\r\n                <h2 className=\"content-header-title float-left mb-0\">\r\n                  {this.props.breadCrumbTitle}\r\n                </h2>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <div className=\"breadcrumb-wrapper vx-breadcrumbs d-sm-block d-none col-12\">\r\n                <Breadcrumb tag=\"ol\">\r\n                  <BreadcrumbItem tag=\"li\">\r\n                    <NavLink to=\"/\">\r\n                      <Home className=\"align-top\" size={15} />\r\n                    </NavLink>\r\n                  </BreadcrumbItem>\r\n                  <BreadcrumbItem tag=\"li\" className=\"text-primary\">\r\n                    {this.props.breadCrumbParent}\r\n                  </BreadcrumbItem>\r\n                  {this.props.breadCrumbParent2 ? (\r\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\r\n                      {this.props.breadCrumbParent2}\r\n                    </BreadcrumbItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {this.props.breadCrumbParent3 ? (\r\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\r\n                      {this.props.breadCrumbParent3}\r\n                    </BreadcrumbItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  <BreadcrumbItem tag=\"li\" active>\r\n                    {this.props.breadCrumbActive}\r\n                  </BreadcrumbItem>\r\n                </Breadcrumb>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"content-header-right text-md-right col-md-3 col-12 d-md-block d-none\">\r\n          <div className=\"form-group breadcrum-right dropdown\">\r\n            <UncontrolledButtonDropdown>\r\n              <DropdownToggle\r\n                color=\"primary\"\r\n                size=\"sm\"\r\n                className=\"btn-icon btn-round dropdown-toggle\"\r\n              >\r\n                <Settings\r\n                  size={14}\r\n                  style={{\r\n                    left: 0\r\n                  }}\r\n                />\r\n              </DropdownToggle>\r\n              <DropdownMenu tag=\"ul\" right>\r\n                <DropdownItem tag=\"li\">\r\n                  <NavLink className=\"text-dark w-100\" to=\"/chat\">\r\n                    Chat\r\n                  </NavLink>\r\n                </DropdownItem>\r\n                <DropdownItem tag=\"li\">\r\n                  <NavLink className=\"text-dark w-100\" to=\"/email/inbox\">\r\n                    Email\r\n                  </NavLink>\r\n                </DropdownItem>\r\n                <DropdownItem tag=\"li\">\r\n                  <NavLink className=\"text-dark w-100\" to=\"/calendar\">\r\n                    Calendar\r\n                  </NavLink>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledButtonDropdown>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default BreadCrumbs\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Pagination,\r\n    PaginationItem,\r\n    PaginationLink\r\n} from \"reactstrap\"\r\nimport { ChevronLeft, ChevronRight } from \"react-feather\"\r\nimport './Index.css'\r\n\r\nexport default function Index({ total, currentPage, onChangeCurrentPage }) {\r\n    let [currentX, setCurrentX] = useState(currentPage)\r\n    const paginators = () => {\r\n        const data = [\r\n            <PaginationItem href=\"#\" className=\"prev-item\">\r\n                <PaginationLink disabled={currentX === 1} onClick={() => { prev() }} href=\"#\" first>\r\n                    <ChevronLeft />\r\n                </PaginationLink>\r\n            </PaginationItem>]\r\n        for (let i = 1; i <= total; i++) {\r\n            data.push(\r\n                <PaginationItem active={currentX === i ? \"active\" : \"\"}>\r\n                    <PaginationLink className={paginatorClassName(i)} onClick={() => { onCurrentPage(i) }} href=\"#\" >{i}</PaginationLink>\r\n                </PaginationItem>)\r\n        }\r\n        data.push(\r\n            <PaginationItem href=\"#\" className=\"next-item\">\r\n                <PaginationLink disabled={currentX === total} onClick={() => { next() }} href=\"#\" last>\r\n                    <ChevronRight />\r\n                </PaginationLink>\r\n            </PaginationItem >)\r\n        return data\r\n    }\r\n    const onCurrentPage = page => {\r\n        updateCurrentPage(page)\r\n    }\r\n    const updateCurrentPage = page => {\r\n        if (page === currentX) return\r\n        setCurrentX(page)\r\n        onChangeCurrentPage(page)\r\n    }\r\n    const next = () => {\r\n        if (currentX === total) {\r\n            return\r\n        }\r\n        const n = currentX + 1\r\n        updateCurrentPage(n)\r\n    }\r\n\r\n    const prev = () => {\r\n        if (currentX === 1) {\r\n            return\r\n        }\r\n        const p = currentX - 1\r\n        updateCurrentPage(p)\r\n    }\r\n\r\n    const paginatorClassName = number => {\r\n        let className = number === currentX ? 'active' : ''\r\n        return className\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container2\">\r\n                <ul className=\"d-flex paginate\">\r\n                    <Pagination className=\"d-flex justify-content-center mt-3\">\r\n                        {paginators().map(el => el)}\r\n                    </Pagination>\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { Row, Col } from \"reactstrap\"\r\n// import { Star } from \"react-feather\"\r\n\r\nclass ExtensionsHeader extends React.Component {\r\n    render() {\r\n        return (\r\n            <Row className=\"mb-2\">\r\n                <Col sm=\"12\" className=\"ml-50\">\r\n                    <p\r\n                        className=\"font-medium-5 mt-1 extension-title\"\r\n                        data-tour=\"extension-title\"\r\n                    >\r\n                        {this.props.title}\r\n                    </p>\r\n                    {this.props.link ? <a href={this.props.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        {this.props.subTitle}\r\n                    </a> : <p className=\"text-primary\">{this.props.subTitle}</p>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\nexport default ExtensionsHeader\r\n","import React from \"react\"\r\nimport { Card, CardHeader, CardBody, CardTitle, Button } from \"reactstrap\"\r\nimport { toast } from \"react-toastify\"\r\n\r\nclass Toastr extends React.Component {\r\n  notifyDefault = () => toast(\"This is default toast!\")\r\n  notifySuccess = () => toast.success(\"This is success toast!\")\r\n  notifyError = () => toast.error(\"This is error toast!\")\r\n  notifyInfo = () => toast.info(\"This is info toast!\")\r\n  notifyWarning = () => toast.warning(\"This is warning toast!\")\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Types</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <div className=\"d-inline-block mr-1 mb-1\">\r\n            <Button.Ripple color=\"primary\" onClick={this.notifyDefault} outline>\r\n              Default\r\n            </Button.Ripple>\r\n          </div>\r\n          <div className=\"d-inline-block mr-1 mb-1\">\r\n            <Button.Ripple color=\"success\" onClick={this.notifySuccess} outline>\r\n              Success\r\n            </Button.Ripple>\r\n          </div>\r\n          <div className=\"d-inline-block mr-1 mb-1\">\r\n            {\" \"}\r\n            <Button.Ripple color=\"info\" onClick={this.notifyError} outline>\r\n              Danger\r\n            </Button.Ripple>{\" \"}\r\n          </div>\r\n          <div className=\"d-inline-block mr-1 mb-1\">\r\n            <Button.Ripple color=\"warning\" onClick={this.notifyInfo} outline>\r\n              Info\r\n            </Button.Ripple>{\" \"}\r\n          </div>\r\n          <div className=\"d-inline-block mr-1 mb-1\">\r\n            <Button.Ripple color=\"danger\" onClick={this.notifyWarning} outline>\r\n              Warning\r\n            </Button.Ripple>\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Toastr\r\n","import React, { useEffect } from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { toast } from \"react-toastify\"\r\n\r\nexport default function ToastrPositions() {\r\n  const notifyTopCenter = () =>\r\n    toast.info(\"Top Center\", {\r\n      position: toast.POSITION.TOP_CENTER\r\n    })\r\n  return (\r\n    <div className=\"d-inline-block mr-1 mb-1\">\r\n      {/* <Button.Ripple\r\n              color=\"primary\"\r\n              outline\r\n              onClick={this.notifyTopCenter}\r\n            >\r\n              ok\r\n            </Button.Ripple> */}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport ExtensionsHeader from \"../ExtensionHeader\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport ToastrTypes from \"./ToastTypes\"\r\nimport ToastrPositions from \"./ToastPositions\"\r\nimport { ToastContainer } from \"react-toastify\"\r\nimport \"react-toastify/dist/ReactToastify.css\"\r\nimport \"../../../assets/scss/plugins/extensions/toastr.scss\"\r\n\r\nclass Toastr extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Row>\r\n          <Col sm=\"12\">\r\n            <ToastrPositions />\r\n          </Col>\r\n          <ToastContainer />\r\n        </Row>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Toastr\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\nimport http from '../../../../http'\r\nimport { toast } from 'react-toastify'\r\n\r\nexport default function ModalVideoDelete({\r\n    show,\r\n    closeModal,\r\n    id,\r\n    deleteProjects,\r\n}) {\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModal(false)\r\n        }\r\n        closeModal(true)\r\n    }\r\n    const submitForm = (e) => {\r\n        deleteProjects(id)\r\n        http.delete(`/video/delete/${id}`)\r\n            .then((res) => {\r\n                notifySuccess('Видео успешно удалено!')\r\n            })\r\n            .catch(function (errors) {\r\n                console.log('Ошибка', `${errors.message}`)\r\n            })\r\n    }\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-danger\">\r\n                    Внимание\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    Вы уверены, что хотите удалить этого видео?\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"danger\"\r\n                        onClick={(e) => {\r\n                            submitForm(e)\r\n                            toggleModal()\r\n                        }}\r\n                    >\r\n                        Удалить\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Card,\r\n    CardHeader,\r\n    CardTitle,\r\n    CardBody,\r\n    FormGroup,\r\n    Label,\r\n} from 'reactstrap'\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport { Formik, Field, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport '../../../../assets/scss/plugins/extensions/editor.scss'\r\nimport '../../../../assets/scss/plugins/extensions/dropzone.scss'\r\nimport http from '../../../../http'\r\nimport FormData from 'form-data'\r\nimport { toast } from 'react-toastify'\r\n\r\nconst formSchema = Yup.object().shape({\r\n    required: Yup.string().required('Required'),\r\n    minlength: Yup.string().min(4, 'Too Short!').required('Required'),\r\n    maxlength: Yup.string().max(5, 'Too Long!').required('Required'),\r\n})\r\n\r\nexport default function ModalAddVideo({ show, closeModalAdd, addVideo }) {\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const notifyError = (txt) => toast.error(txt)\r\n    const [preloadImg, setpreloadImg] = useState({ image: null })\r\n    const [files, setFiles] = useState([])\r\n    const [post, setPost] = useState({\r\n        title: null,\r\n        text: null,\r\n        url: null,\r\n        file: null,\r\n    })\r\n\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModalAdd(false)\r\n        }\r\n        closeModalAdd(true)\r\n    }\r\n\r\n    const handleFileInput = (e) => {\r\n        setPost({ ...post, file: e.target.files[0] })\r\n        if (e.target.files && e.target.files[0]) {\r\n            let img = e.target.files[0]\r\n            setpreloadImg({\r\n                image: URL.createObjectURL(img),\r\n            })\r\n        }\r\n    }\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        accept: 'image/*',\r\n        onDrop: (acceptedFiles) => {\r\n            setFiles(\r\n                acceptedFiles.map((file) =>\r\n                    Object.assign(file, {\r\n                        preview: URL.createObjectURL(file),\r\n                    })\r\n                )\r\n            )\r\n        },\r\n    })\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        const data = new FormData()\r\n        data.append('title', post.title)\r\n        data.append('text', post.text)\r\n        data.append('urlVideo', post.url)\r\n        data.append('image', post.file)\r\n\r\n        http.post('/video/create', data)\r\n            .then((response) => {\r\n                addVideo(post, preloadImg.image)\r\n                toggleModal()\r\n                notifySuccess('Видео успешно добавлен!')\r\n            })\r\n            .catch(function (errors) {\r\n                notifyError(`О нет ошибка , ${errors.message}`)\r\n            })\r\n    }\r\n    const thumbs = () => (\r\n        <div className=\"dz-thumb\">\r\n            <div className=\"dz-thumb-inner\">\r\n                <img src={preloadImg.image} className=\"dz-img\" alt=\"dd\" />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    useEffect(\r\n        () => () => {\r\n            // Make sure to revoke the data uris to avoid memory leaks\r\n            files.forEach((file) => URL.revokeObjectURL(file.preview))\r\n        },\r\n        [files]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered modal-lg\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-primary\">\r\n                    Добавить видео\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            required: '',\r\n                            name: '',\r\n                            date: '',\r\n                            minlength: '',\r\n                            maxlength: '',\r\n                        }}\r\n                        validationSchema={formSchema}\r\n                    >\r\n                        {({ errors, touched }) => (\r\n                            <Form className=\"w-100\" onSubmit={submitForm}>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Заголовок\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"title\"\r\n                                                id=\"required\"\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        title: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Описание\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"text\"\r\n                                                id=\"required\"\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        text: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Ссылка на видео\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"title\"\r\n                                                id=\"required\"\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        url: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <section>\r\n                                            <div\r\n                                                {...getRootProps({\r\n                                                    className: 'dropzone',\r\n                                                })}\r\n                                            >\r\n                                                <input\r\n                                                    {...getInputProps()}\r\n                                                    onChange={handleFileInput}\r\n                                                />\r\n                                                <p className=\"mx-1\">\r\n                                                    Перетащите сюда файл или\r\n                                                    щелкните, чтобы выбрать файл\r\n                                                </p>\r\n                                            </div>\r\n                                            <aside className=\"thumb-container\">\r\n                                                <div className=\"dz-thumb\">\r\n                                                    <div className=\"dz-thumb-inner\">\r\n                                                        {preloadImg.image !==\r\n                                                        null ? (\r\n                                                            <img\r\n                                                                src={\r\n                                                                    preloadImg.image\r\n                                                                }\r\n                                                                className=\"dz-img\"\r\n                                                                alt=\"dd\"\r\n                                                            />\r\n                                                        ) : null}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </aside>\r\n                                        </section>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    className=\"mt-2\"\r\n                                >\r\n                                    Добавить\r\n                                </Button.Ripple>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </ModalBody>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Card,\r\n    CardHeader,\r\n    CardTitle,\r\n    CardBody,\r\n    FormGroup,\r\n    Label,\r\n} from 'reactstrap'\r\nimport { Formik, Field, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport '../../../../assets/scss/plugins/extensions/editor.scss'\r\nimport '../../../../assets/scss/plugins/extensions/dropzone.scss'\r\nimport http from '../../../../http'\r\nimport FormData from 'form-data'\r\nimport { toast } from 'react-toastify'\r\n\r\nconst formSchema = Yup.object().shape({\r\n    required: Yup.string().required('Required'),\r\n    minlength: Yup.string().min(4, 'Too Short!').required('Required'),\r\n    maxlength: Yup.string().max(5, 'Too Long!').required('Required'),\r\n})\r\n\r\nexport default function ModalEditVideo({\r\n    show,\r\n    closeModalEdit,\r\n    editVideo,\r\n    video,\r\n}) {\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const notifyError = (txt) => toast.error(txt)\r\n    const [preloadImg, setpreloadImg] = useState({ image: null })\r\n    const [files, setFiles] = useState([])\r\n\r\n    const [post, setPost] = useState({\r\n        id: null,\r\n        title: null,\r\n        text: null,\r\n        url: null,\r\n        file: null,\r\n    })\r\n\r\n    useEffect(() => {\r\n        setPost({\r\n            id: video.id,\r\n            url: video.urlVideo,\r\n            title: video.title,\r\n            text: video.text,\r\n            file: video.image,\r\n        })\r\n        setpreloadImg({ image: video.image })\r\n    }, [video])\r\n\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModalEdit(false)\r\n        }\r\n        closeModalEdit(true)\r\n    }\r\n\r\n    const handleFileInput = (e) => {\r\n        setPost({ ...post, file: e.target.files[0] })\r\n        if (e.target.files && e.target.files[0]) {\r\n            let img = e.target.files[0]\r\n            setpreloadImg({\r\n                image: URL.createObjectURL(img),\r\n            })\r\n        }\r\n    }\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        accept: 'image/*',\r\n        onDrop: (acceptedFiles) => {\r\n            setFiles(\r\n                acceptedFiles.map((file) =>\r\n                    Object.assign(file, {\r\n                        preview: URL.createObjectURL(file),\r\n                    })\r\n                )\r\n            )\r\n        },\r\n    })\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        const data = new FormData()\r\n        data.append('title', post.title)\r\n        data.append('text', post.text)\r\n        data.append('urlVideo', post.url)\r\n        data.append('image', post.file)\r\n        http.put(`/video/update/${video.id}`, data)\r\n            .then((response) => {\r\n                editVideo(post, preloadImg.image)\r\n                notifySuccess('Видео успешно изменено!')\r\n                toggleModal()\r\n            })\r\n            .catch(function (errors) {\r\n                notifyError(`О нет ошибка , ${errors.message}`)\r\n            })\r\n    }\r\n\r\n    const thumbs = files.map((file) => (\r\n        <div className=\"dz-thumb\" key={file.name}>\r\n            <div className=\"dz-thumb-inner\">\r\n                <img src={file.preview} className=\"dz-img\" alt={file.name} />\r\n            </div>\r\n        </div>\r\n    ))\r\n\r\n    useEffect(\r\n        () => () => {\r\n            // Make sure to revoke the data uris to avoid memory leaks\r\n            files.forEach((file) => URL.revokeObjectURL(file.preview))\r\n        },\r\n        [files]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered modal-lg\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-primary\">\r\n                    Редактирование видео\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            required: '',\r\n                            name: '',\r\n                            date: '',\r\n                            minlength: '',\r\n                            maxlength: '',\r\n                        }}\r\n                        validationSchema={formSchema}\r\n                    >\r\n                        {({ errors, touched }) => (\r\n                            <Form className=\"w-100\" onSubmit={submitForm}>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Заголовок\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"title\"\r\n                                                id=\"required\"\r\n                                                value={post.title}\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        title: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Описание\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"title\"\r\n                                                id=\"required\"\r\n                                                value={post.text}\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        text: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">\r\n                                                Ссылка на видео\r\n                                            </Label>\r\n                                            <Field\r\n                                                name=\"url\"\r\n                                                id=\"required\"\r\n                                                value={post.urlVideo}\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        url: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <section>\r\n                                            <div\r\n                                                {...getRootProps({\r\n                                                    className: 'dropzone',\r\n                                                })}\r\n                                            >\r\n                                                <input\r\n                                                    {...getInputProps()}\r\n                                                    onChange={handleFileInput}\r\n                                                />\r\n                                                <p className=\"mx-1\">\r\n                                                    Перетащите сюда файл или\r\n                                                    щелкните, чтобы выбрать файл\r\n                                                </p>\r\n                                            </div>\r\n                                            <aside className=\"thumb-container\">\r\n                                                <div className=\"dz-thumb\">\r\n                                                    <div className=\"dz-thumb-inner\">\r\n                                                        {preloadImg.image !==\r\n                                                        null ? (\r\n                                                            <img\r\n                                                                src={\r\n                                                                    preloadImg.image\r\n                                                                }\r\n                                                                className=\"dz-img\"\r\n                                                                alt=\"dd\"\r\n                                                            />\r\n                                                        ) : null}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </aside>\r\n                                        </section>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    className=\"mt-2\"\r\n                                >\r\n                                    Изменить\r\n                                </Button.Ripple>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </ModalBody>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Table,\r\n    Input,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    CardTitle,\r\n    UncontrolledTooltip,\r\n} from 'reactstrap'\r\nimport { Search } from 'react-feather'\r\nimport * as Icon from 'react-feather'\r\nimport ModalWarning from './ModalDeleteVideo'\r\nimport ModalAdd from './ModalAddVideo'\r\nimport ModalEdit from './ModalEditVideo'\r\nimport Paginate from '../../pagination/Index'\r\nimport http from '../../../../http'\r\nimport { Link } from 'react-router-dom'\r\nimport { toast } from 'react-toastify'\r\nimport Tst from '../../toastify/Toastify'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport '../../../../assets/scss/plugins/extensions/toastr.scss'\r\nimport './Index.css'\r\n\r\nexport default function Index() {\r\n    const [post, setPost] = useState([])\r\n    const [modal, setModal] = useState(false)\r\n    const [modalAdd, setModalAdd] = useState(false)\r\n    const [modalEdit, setModalEdit] = useState(false)\r\n    const [video, setVideo] = useState([])\r\n    const [idVideo, setIdVideo] = useState()\r\n\r\n    const closeModal = (act) => {\r\n        setModal(false)\r\n    }\r\n\r\n    const addVideo = (el, img) => {\r\n        const newVideo = {\r\n            title: el.title,\r\n            text: el.text,\r\n            urlVideo: el.url,\r\n            image: img,\r\n        }\r\n        setPost((prevState) => [...prevState, newVideo])\r\n    }\r\n\r\n    const editVideo = (el, img) => {\r\n        let index = post.findIndex((element) => element.id === el.id)\r\n        post[index].title = el.title\r\n        post[index].text = el.text\r\n        post[index].urlVideo = el.url\r\n        if (img === null) {\r\n            post[index].image = el.file\r\n        } else {\r\n            post[index].image = img\r\n        }\r\n    }\r\n\r\n    const deleteProjects = (id) => {\r\n        let res = post.findIndex((element) => element.id === id)\r\n        post.splice(res, 1)\r\n        console.log('res', res, 'post', post)\r\n    }\r\n\r\n    const closeModalAdd = (act) => {\r\n        setModalAdd(false)\r\n    }\r\n    const closeModalEdit = (act) => {\r\n        setModalEdit(false)\r\n    }\r\n\r\n    const [pagePost, setPagePost] = useState(1)\r\n    const [pagTotal, setPagTotal] = useState()\r\n    useEffect(() => {\r\n        http.get(`get_video?page=${pagePost}`).then((response) => {\r\n            setPost(response.data.video.rows)\r\n            setPagTotal(response.data.pages)\r\n        })\r\n    }, [pagePost])\r\n\r\n    const onUpdateCurrentPage = async (page) => {\r\n        await setPagePost(page)\r\n        console.log('async update', page)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <ModalWarning\r\n                    show={modal}\r\n                    deleteProjects={deleteProjects}\r\n                    closeModal={closeModal}\r\n                    id={idVideo}\r\n                />\r\n                <ModalAdd\r\n                    show={modalAdd}\r\n                    addVideo={addVideo}\r\n                    closeModalAdd={closeModalAdd}\r\n                />\r\n                <ModalEdit\r\n                    show={modalEdit}\r\n                    editVideo={editVideo}\r\n                    closeModalEdit={closeModalEdit}\r\n                    video={video}\r\n                />\r\n                <CardHeader>\r\n                    <CardTitle>Видео</CardTitle>\r\n                </CardHeader>\r\n                <CardBody className=\"rdt_Wrapper\">\r\n                    <Tst />\r\n                    <div className=\"d-flex flex-wrap justify-content-between mb-2\">\r\n                        <div className=\"add-new\">\r\n                            <>\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                        setModalAdd(true)\r\n                                    }}\r\n                                >\r\n                                    Добавить новое\r\n                                </Button.Ripple>\r\n                            </>\r\n                        </div>\r\n                    </div>\r\n                    <Table className=\"table-hover-animation\" responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>№</th>\r\n                                <th>Изображение</th>\r\n                                <th>Заголовок</th>\r\n                                <th>Текст</th>\r\n                                <th>Ссылка на видео</th>\r\n                                <th>Действия</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post?.map((el, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <th scope=\"row\">{index + 1}</th>\r\n                                        <td>\r\n                                            <img\r\n                                                src={el.image}\r\n                                                alt=\"img-news\"\r\n                                                className=\"img__news\"\r\n                                            />\r\n                                        </td>\r\n                                        <td>{el.title}</td>\r\n                                        <td>{el.text}</td>\r\n                                        <td>{el.urlVideo}</td>\r\n                                        <td>\r\n                                            <div className=\"d-flex\">\r\n                                                <Icon.Edit\r\n                                                    size={20}\r\n                                                    outline\r\n                                                    id=\"positionTop\"\r\n                                                    onClick={() => {\r\n                                                        setModalEdit(true)\r\n                                                        setVideo(el)\r\n                                                    }}\r\n                                                />\r\n                                                <UncontrolledTooltip\r\n                                                    placement=\"top\"\r\n                                                    target=\"positionTop\"\r\n                                                >\r\n                                                    Изменить\r\n                                                </UncontrolledTooltip>\r\n                                                <Icon.Trash2\r\n                                                    size={20}\r\n                                                    className=\"ml-2\"\r\n                                                    outline\r\n                                                    id=\"positionBottom\"\r\n                                                    onClick={() => {\r\n                                                        setModal(true)\r\n                                                        setIdVideo(el.id)\r\n                                                    }}\r\n                                                />\r\n                                                <UncontrolledTooltip\r\n                                                    placement=\"bottom\"\r\n                                                    target=\"positionBottom\"\r\n                                                >\r\n                                                    Удалить\r\n                                                </UncontrolledTooltip>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                    <Paginate\r\n                        total={pagTotal}\r\n                        currentPage={pagePost}\r\n                        onChangeCurrentPage={onUpdateCurrentPage}\r\n                    />\r\n                </CardBody>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport Breadcrumbs from \"../../breadCrumbs/BreadCrumb\"\r\nimport Video from \"./Index\"\r\n\r\nclass DataTables extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Breadcrumbs\r\n                    breadCrumbTitle=\"Видео\"\r\n                    breadCrumbParent=\"Главный\"\r\n                    breadCrumbActive=\"Видео\"\r\n                />\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <Video />\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataTables\r\n","import React from 'react'\r\nimport Main from '../../components/@vuexy/video/get-video/DataVideo'\r\n\r\nexport default function Video() {\r\n    return (\r\n        <>\r\n            <Main />\r\n        </>\r\n    )\r\n}\r\n"],"sourceRoot":""}