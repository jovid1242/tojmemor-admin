{"version":3,"sources":["http.js","components/@vuexy/breadCrumbs/BreadCrumb.js","components/@vuexy/ExtensionHeader.js","components/@vuexy/toastify/ToastTypes.js","components/@vuexy/toastify/ToastPositions.js","components/@vuexy/toastify/Toastify.js","components/@vuexy/pagination/Index.js","components/@vuexy/users/tables/data-tables/ModalWarning.js","components/@vuexy/users/tables/data-tables/ModalAdd.js","components/@vuexy/users/tables/data-tables/ModalEdit.js","components/@vuexy/users/tables/data-tables/DataTableCustom.js","components/@vuexy/users/tables/data-tables/DataTables.js","views/pages/Users.js"],"names":["http","axios","create","baseURL","headers","Accept","BreadCrumbs","className","this","props","breadCrumbTitle","tag","to","size","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","active","breadCrumbActive","React","Component","ToastrPositions","Toastr","Fragment","Row","Col","sm","Index","total","currentPage","onChangeCurrentPage","useState","currentX","setCurrentX","onCurrentPage","page","updateCurrentPage","next","prev","paginatorClassName","number","data","href","disabled","onClick","first","i","push","last","paginators","map","el","ModalWarning","show","closeModal","id","deleteUser","toggleModal","submitForm","e","delete","then","res","txt","toast","success","catch","errors","message","warning","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","formSchema","Yup","shape","required","minlength","min","maxlength","max","ModalAdd","closeModalAdd","addUser","files","setFiles","image","preloadImg","setpreloadImg","name","email","status","file","password","post","setPost","handleFileInput","target","img","URL","createObjectURL","useDropzone","accept","onDrop","acceptedFiles","Object","assign","preview","getRootProps","getInputProps","preventDefault","FormData","append","response","error","useEffect","forEach","revokeObjectURL","initialValues","date","validationSchema","touched","onSubmit","Card","CardBody","FormGroup","Label","for","onChange","value","CustomInput","type","src","alt","Ripple","ModalEdit","closeModalEdit","editUser","user","put","key","searchPost","setSearchPost","modal","setModal","modalAdd","setModalAdd","modalEdit","setModalEdit","setUser","idNews","setIdNews","pagePost","setPagePost","pagTotal","setPagTotal","get","rows","pages","onUpdateCurrentPage","a","console","log","act","findIndex","element","splice","prevState","index","CardHeader","CardTitle","Input","Table","responsive","filter","val","toLowerCase","includes","text","height","width","UncontrolledTooltip","placement","outline","DataTables","Users"],"mappings":"mJAAA,YAEMA,EAFN,OAEaC,EAAMC,OAAO,CACtBC,QAAS,qCACTC,QAAS,CACL,eAAgB,mBAChBC,OAAQ,sBAIDL,O,0LCCTM,E,4JACJ,WACE,OACE,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,4CACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,UACZC,KAAKC,MAAMC,gBACV,wBAAIH,UAAU,wCACXC,KAAKC,MAAMC,iBAGd,GAEF,yBAAKH,UAAU,8DACb,kBAAC,IAAD,CAAYI,IAAI,MACd,kBAAC,IAAD,CAAgBA,IAAI,MAClB,kBAAC,IAAD,CAASC,GAAG,KACV,kBAAC,IAAD,CAAML,UAAU,YAAYM,KAAM,OAGtC,kBAAC,IAAD,CAAgBF,IAAI,KAAKJ,UAAU,gBAChCC,KAAKC,MAAMK,kBAEbN,KAAKC,MAAMM,kBACV,kBAAC,IAAD,CAAgBJ,IAAI,KAAKJ,UAAU,gBAChCC,KAAKC,MAAMM,mBAGd,GAEDP,KAAKC,MAAMO,kBACV,kBAAC,IAAD,CAAgBL,IAAI,KAAKJ,UAAU,gBAChCC,KAAKC,MAAMO,mBAGd,GAEF,kBAAC,IAAD,CAAgBL,IAAI,KAAKM,QAAM,GAC5BT,KAAKC,MAAMS,4B,GAvCNC,IAAMC,WAqFjBd,O,0GC5FgBa,IAAMC,U,qDCAhBD,IAAMC,UCAZ,SAASC,IAKtB,OACE,yBAAKd,UAAU,6B,kBCDbe,E,4JACJ,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACN,kBAACL,EAAD,OAEF,kBAAC,IAAD,Y,GARWF,IAAMC,WAeZE,O,oJCfA,SAASK,EAAT,GAA6D,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,oBAChD,EAA8BC,mBAASF,GAAvC,mBAAKG,EAAL,KAAeC,EAAf,KAsBMC,EAAgB,SAAAC,GAClBC,EAAkBD,IAEhBC,EAAoB,SAAAD,GAClBA,IAASH,IACbC,EAAYE,GACZL,EAAoBK,KAElBE,EAAO,WACLL,IAAaJ,GAIjBQ,EADUJ,EAAW,IAInBM,EAAO,WACQ,IAAbN,GAIJI,EADUJ,EAAW,IAInBO,EAAqB,SAAAC,GAEvB,OADgBA,IAAWR,EAAW,SAAW,IAIrD,OACI,oCACI,yBAAKzB,UAAU,cACX,wBAAIA,UAAU,mBACV,kBAAC,IAAD,CAAYA,UAAU,sCAtDnB,WAOf,IANA,IAAMkC,EAAO,CACT,kBAAC,IAAD,CAAgBC,KAAK,IAAInC,UAAU,aAC/B,kBAAC,IAAD,CAAgBoC,SAAuB,IAAbX,EAAgBY,QAAS,WAAQN,KAAUI,KAAK,IAAIG,OAAK,GAC/E,kBAAC,IAAD,SAJS,WAOZC,GACLL,EAAKM,KACD,kBAAC,IAAD,CAAgB9B,OAAQe,IAAac,EAAI,SAAW,IAChD,kBAAC,IAAD,CAAgBvC,UAAWgC,EAAmBO,GAAIF,QAAS,WAAQV,EAAcY,IAAMJ,KAAK,KAAMI,MAHrGA,EAAI,EAAGA,GAAKlB,EAAOkB,IAAM,EAAzBA,GAYT,OANAL,EAAKM,KACD,kBAAC,IAAD,CAAgBL,KAAK,IAAInC,UAAU,aAC/B,kBAAC,IAAD,CAAgBoC,SAAUX,IAAaJ,EAAOgB,QAAS,WAAQP,KAAUK,KAAK,IAAIM,MAAI,GAClF,kBAAC,IAAD,SAGLP,EAoCUQ,GAAaC,KAAI,SAAAC,GAAE,OAAIA,W,qaC7DjC,SAASC,EAAT,GAA6D,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,WAGnDC,EAAc,WACZJ,GACAC,GAAW,GAEfA,GAAW,IAETI,EAAa,SAACC,GAChBH,EAAWD,GACXvD,IAAK4D,OAAL,uBAA4BL,IACvBM,MAAK,SAACC,GAVO,IAACC,IAWG,4JAXKC,IAAMC,QAAQF,MAapCG,OAAM,SAAUC,GAdH,IAACJ,IAeG,0CAAD,OAAaI,EAAOC,SAfdJ,IAAMK,QAAQN,OAkB7C,OACI,oCACI,kBAACO,EAAA,EAAD,CACIC,OAAQlB,EACRmB,OAAQf,EACRlD,UAAU,yBAEV,kBAACkE,EAAA,EAAD,CAAaD,OAAQf,EAAalD,UAAU,aAA5C,oDAGA,kBAACmE,EAAA,EAAD,CAAWnE,UAAU,yBAArB,wQAGA,kBAACoE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,SACNjC,QAAS,SAACe,GACND,IACAD,MAJR,iD,0GChBdqB,EAAaC,MAAaC,MAAM,CAClCC,SAAUF,MAAaE,SAAS,YAChCC,UAAWH,MAAaI,IAAI,EAAG,cAAcF,SAAS,YACtDG,UAAWL,MAAaM,IAAI,EAAG,aAAaJ,SAAS,cAG1C,SAASK,EAAT,GAAqD,IAAjCjC,EAAgC,EAAhCA,KAAMkC,EAA0B,EAA1BA,cAAeC,EAAW,EAAXA,QAGpD,EAA0BzD,mBAAS,IAAnC,mBAAO0D,EAAP,KAAcC,EAAd,KACA,EAAoC3D,mBAAS,CAAE4D,MAAO,OAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAAwB9D,mBAAS,CAC7B+D,KAAM,KACNC,MAAO,KACPC,OAAQ,KACRC,KAAM,KACNC,SAAU,OALd,mBAAOC,EAAP,KAAaC,EAAb,KAQM3C,EAAc,WACZJ,GACAkC,GAAc,GAElBA,GAAc,IAGZc,EAAkB,SAAC1C,GAErB,GADAyC,EAAQ,2BAAKD,GAAN,IAAYF,KAAMtC,EAAE2C,OAAOb,MAAM,MACpC9B,EAAE2C,OAAOb,OAAS9B,EAAE2C,OAAOb,MAAM,GAAI,CACrC,IAAIc,EAAM5C,EAAE2C,OAAOb,MAAM,GACzBI,EAAc,CACVF,MAAOa,IAAIC,gBAAgBF,OAKvC,EAAwCG,YAAY,CAChDC,OAAQ,UACRC,OAAQ,SAACC,GACLnB,EACImB,EAAc3D,KAAI,SAAC+C,GAAD,OACda,OAAOC,OAAOd,EAAM,CAChBe,QAASR,IAAIC,gBAAgBR,YANzCgB,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAahBxD,EAAa,SAACC,GAChBA,EAAEwD,iBACF,IAAM1E,EAAO,IAAI2E,IACjB3E,EAAK4E,OAAO,OAAQlB,EAAKL,MACzBrD,EAAK4E,OAAO,QAASlB,EAAKJ,OAC1BtD,EAAK4E,OAAO,WAAYlB,EAAKD,UAC7BzD,EAAK4E,OAAO,SAAUlB,EAAKH,QAC3BvD,EAAK4E,OAAO,QAASlB,EAAKF,MAE1BjG,IAAKmG,KAAK,YAAa1D,GAClBoB,MAAK,SAACyD,GArDO,IAACvD,EAsDXyB,EAAQW,EAAMP,EAAWD,OACzBlC,IAvDWM,EAwDG,kKAxDKC,IAAMC,QAAQF,MA0DpCG,OAAM,SAAUC,GAzDL,IAACJ,IA0DG,6DAAD,OAAiBI,EAAOC,SA1DlBJ,IAAMuD,MAAMxD,OAqEzC,OAPAyD,qBACI,kBAAM,WACF/B,EAAMgC,SAAQ,SAACxB,GAAD,OAAUO,IAAIkB,gBAAgBzB,EAAKe,eAErD,CAACvB,IAID,oCACI,kBAACnB,EAAA,EAAD,CACIC,OAAQlB,EACRmB,OAAQf,EACRlD,UAAU,kCAEV,kBAACkE,EAAA,EAAD,CAAaD,OAAQf,EAAalD,UAAU,cAA5C,yIAGA,kBAACmE,EAAA,EAAD,CAAWnE,UAAU,yBACjB,kBAAC,IAAD,CACIoH,cAAe,CACX1C,SAAU,GACVa,KAAM,GACN8B,KAAM,GACN1C,UAAW,GACXE,UAAW,IAEfyC,iBAAkB/C,IAEjB,gBAAGX,EAAH,EAAGA,OAAQ2D,EAAX,EAAWA,QAAX,OACG,kBAAC,IAAD,CAAMvH,UAAU,QAAQwH,SAAUrE,GAC9B,kBAACsE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAU1H,UAAU,eAChB,kBAAC2H,EAAA,EAAD,CAAW3H,UAAU,QACjB,kBAAC4H,EAAA,EAAD,CAAOC,IAAI,YAAX,sBACA,kBAAC,IAAD,CACItC,KAAK,OACLuC,SAAU,SAAC1E,GAAD,OACNyC,EAAQ,2BACDD,GADA,IAEHL,KAAMnC,EAAE2C,OAAOgC,UAGvB/H,UAAU,kBAIlB,kBAAC2H,EAAA,EAAD,CAAW3H,UAAU,QACjB,kBAAC4H,EAAA,EAAD,CAAOC,IAAI,YAAX,UACA,kBAAC,IAAD,CACItC,KAAK,QACLvC,GAAG,WACH8E,SAAU,SAAC1E,GAAD,OACNyC,EAAQ,2BACDD,GADA,IAEHJ,MAAOpC,EAAE2C,OAAOgC,UAGxB/H,UAAS,uBACL4D,EAAOc,UACP6C,EAAQ7C,UACR,gBAGPd,EAAOc,UACR6C,EAAQ7C,SACJ,yBAAK1E,UAAU,yBACV4D,EAAOc,UAEZ,MAGR,kBAACiD,EAAA,EAAD,CAAW3H,UAAU,QACjB,kBAAC4H,EAAA,EAAD,CAAOC,IAAI,YAAX,wCACA,kBAAC,IAAD,CACItC,KAAK,WACLvC,GAAG,WACH8E,SAAU,SAAC1E,GAAD,OACNyC,EAAQ,2BACDD,GADA,IAEHD,SACIvC,EAAE2C,OAAOgC,UAGrB/H,UAAS,uBACL4D,EAAOc,UACP6C,EAAQ7C,UACR,gBAGPd,EAAOc,UACR6C,EAAQ7C,SACJ,yBAAK1E,UAAU,yBACV4D,EAAOc,UAEZ,MAGR,kBAACiD,EAAA,EAAD,CAAW3H,UAAU,QACjB,kBAAC4H,EAAA,EAAD,CAAOC,IAAI,YAAX,sBACA,kBAACG,EAAA,EAAD,CACIC,KAAK,SACL1C,KAAK,SACLvC,GAAG,OACH8E,SAAU,SAAC1E,GACPyC,EAAQ,2BACDD,GADA,IAEHH,OAAQrC,EAAE2C,OAAOgC,WAIzB,4BAAQA,MAAM,OACd,4BAAQA,MAAM,SAAd,kCAGA,4BAAQA,MAAM,WAAd,wDAOhB,kBAACN,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAU1H,UAAU,eAChB,iCACI,wBACQ0G,EAAa,CACb1G,UAAW,aAGf,2CACQ2G,IADR,CAEImB,SAAUhC,KAEd,uBAAG9F,UAAU,QAAb,2RAKJ,2BAAOA,UAAU,mBACb,yBAAKA,UAAU,YACX,yBAAKA,UAAU,kBAEX,OADCqF,EAAWD,MAER,yBACI8C,IACI7C,EAAWD,MAEfpF,UAAU,SACVmI,IAAI,OAER,WAO5B,kBAAC9D,EAAA,EAAO+D,OAAR,CACI9D,MAAM,UACN2D,KAAK,SACLjI,UAAU,QAHd,2DClOhC,IAAMuE,EAAaC,MAAaC,MAAM,CAClCC,SAAUF,MAAaE,SAAS,YAChCC,UAAWH,MAAaI,IAAI,EAAG,cAAcF,SAAS,YACtDG,UAAWL,MAAaM,IAAI,EAAG,aAAaJ,SAAS,cAG1C,SAAS2D,EAAT,GAA8D,IAAzCvF,EAAwC,EAAxCA,KAAMwF,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KAGhE,EAA0BhH,mBAAS,IAAnC,mBAAO0D,EAAP,KAAcC,EAAd,KACA,EAAoC3D,mBAAS,CAAE4D,MAAO,OAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAAwB9D,mBAAS,CAC7BwB,GAAI,KACJuC,KAAM,KACNC,MAAO,KACPC,OAAQ,KACRC,KAAM,OALV,mBAAOE,EAAP,KAAaC,EAAb,KAQAoB,qBAAU,WACNpB,EAAQ,CACJ7C,GAAIwF,EAAKxF,GACTuC,KAAMiD,EAAKjD,KACXC,MAAOgD,EAAKhD,MACZC,OAAQ+C,EAAK/C,OACbC,KAAM8C,EAAKpD,QAEfE,EAAc,CAAEF,MAAOoD,EAAKpD,UAC7B,CAACoD,IAEJ,IAAMtF,EAAc,WACZJ,GACAwF,GAAe,GAEnBA,GAAe,IAEbxC,EAAkB,SAAC1C,GAErB,GADAyC,EAAQ,2BAAKD,GAAN,IAAYF,KAAMtC,EAAE2C,OAAOb,MAAM,MACpC9B,EAAE2C,OAAOb,OAAS9B,EAAE2C,OAAOb,MAAM,GAAI,CACrC,IAAIc,EAAM5C,EAAE2C,OAAOb,MAAM,GACzBI,EAAc,CACVF,MAAOa,IAAIC,gBAAgBF,OAKvC,EAAwCG,YAAY,CAChDC,OAAQ,UACRC,OAAQ,SAACC,GACLnB,EACImB,EAAc3D,KAAI,SAAC+C,GAAD,OACda,OAAOC,OAAOd,EAAM,CAChBe,QAASR,IAAIC,gBAAgBR,YANzCgB,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAahBxD,EAAa,SAACC,GAChBA,EAAEwD,iBACF,IAAM1E,EAAO,IAAI2E,IACjB3E,EAAK4E,OAAO,OAAQlB,EAAKL,MACzBrD,EAAK4E,OAAO,QAASlB,EAAKJ,OAC1BtD,EAAK4E,OAAO,SAAUlB,EAAKH,QAC3BvD,EAAK4E,OAAO,QAASlB,EAAKF,MAC1BjG,IAAKgJ,IAAL,uBAAyB7C,EAAK5C,IAAMd,GAC/BoB,MAAK,SAACyD,GA7DO,IAACvD,EA8DXN,IACAqF,EAAS3C,EAAMP,EAAWD,OA/Df5B,EAgEG,kKAhEKC,IAAMC,QAAQF,MAkEpCG,OAAM,SAAUC,GAjEL,IAACJ,IAkEG,8BAAD,OAAWI,EAAOC,SAlEZJ,IAAMuD,MAAMxD,OAsE1B0B,EAAMvC,KAAI,SAAC+C,GAAD,OACrB,yBAAK1F,UAAU,WAAW0I,IAAKhD,EAAKH,MAChC,yBAAKvF,UAAU,kBACX,yBAAKkI,IAAKxC,EAAKe,QAASzG,UAAU,SAASmI,IAAKzC,EAAKH,YAajE,OARA0B,qBACI,kBAAM,WAEF/B,EAAMgC,SAAQ,SAACxB,GAAD,OAAUO,IAAIkB,gBAAgBzB,EAAKe,eAErD,CAACvB,IAID,oCACI,kBAACnB,EAAA,EAAD,CACIC,OAAQlB,EACRmB,OAAQf,EACRlD,UAAU,kCAEV,kBAACkE,EAAA,EAAD,CAAaD,OAAQf,EAAalD,UAAU,cAA5C,iKAGA,kBAACmE,EAAA,EAAD,CAAWnE,UAAU,yBACjB,kBAAC,IAAD,CACIoH,cAAe,CACX1C,SAAU,GACVa,KAAM,GACN8B,KAAM,GACN1C,UAAW,GACXE,UAAW,IAEfyC,iBAAkB/C,IAEjB,gBAAGX,EAAH,EAAGA,OAAQ2D,EAAX,EAAWA,QAAX,OACG,kBAAC,IAAD,CAAMvH,UAAU,QAAQwH,SAAUrE,GAC9B,kBAACsE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAU1H,UAAU,eAChB,kBAAC2H,EAAA,EAAD,CAAW3H,UAAU,QACjB,kBAAC4H,EAAA,EAAD,CAAOC,IAAI,YAAX,sBACA,kBAAC,IAAD,CACItC,KAAK,OACLwC,MAAOnC,EAAKL,KACZuC,SAAU,SAAC1E,GAAD,OACNyC,EAAQ,2BACDD,GADA,IAEHL,KAAMnC,EAAE2C,OAAOgC,UAGvB/H,UAAU,kBAIlB,kBAAC2H,EAAA,EAAD,CAAW3H,UAAU,QACjB,kBAAC4H,EAAA,EAAD,CAAOC,IAAI,YAAX,UACA,kBAAC,IAAD,CACItC,KAAK,QACLvC,GAAG,WACH+E,MAAOnC,EAAKJ,MACZsC,SAAU,SAAC1E,GAAD,OACNyC,EAAQ,2BACDD,GADA,IAEHJ,MAAOpC,EAAE2C,OAAOgC,UAGxB/H,UAAS,uBACL4D,EAAOc,UACP6C,EAAQ7C,UACR,gBAGPd,EAAOc,UACR6C,EAAQ7C,SACJ,yBAAK1E,UAAU,yBACV4D,EAAOc,UAEZ,MAGR,kBAACiD,EAAA,EAAD,CAAW3H,UAAU,QACjB,kBAAC4H,EAAA,EAAD,CAAOC,IAAI,YAAX,sBACA,kBAACG,EAAA,EAAD,CACIC,KAAK,SACL1C,KAAK,SACLvC,GAAG,OACH+E,MAAOnC,EAAKH,OACZqC,SAAU,SAAC1E,GACPyC,EAAQ,2BACDD,GADA,IAEHH,OAAQrC,EAAE2C,OAAOgC,WAIzB,4BAAQA,MAAM,OACd,4BAAQA,MAAM,SAAd,kCAGA,4BAAQA,MAAM,WAAd,wDAOhB,kBAACN,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAU1H,UAAU,eAChB,iCACI,wBACQ0G,EAAa,CACb1G,UAAW,aAGf,2CACQ2G,IADR,CAEImB,SAAUhC,KAEd,uBAAG9F,UAAU,QAAb,2RAKJ,2BAAOA,UAAU,mBACb,yBAAKA,UAAU,YACX,yBAAKA,UAAU,kBAEX,OADCqF,EAAWD,MAER,yBACI8C,IACI7C,EAAWD,MAEfpF,UAAU,SACVmI,IAAI,OAER,WAO5B,kBAAC9D,EAAA,EAAO+D,OAAR,CACI9D,MAAM,UACN2D,KAAK,SACLjI,UAAU,QAHd,2D,kDC1NjB,SAASoB,IACpB,MAAwBI,mBAAS,IAAjC,mBAAOoE,EAAP,KAAaC,EAAb,KACA,EAAoCrE,mBAAS,IAA7C,mBAAOmH,EAAP,KAAmBC,EAAnB,KACA,EAA0BpH,oBAAS,GAAnC,mBAAOqH,EAAP,KAAcC,EAAd,KACA,EAAgCtH,oBAAS,GAAzC,mBAAOuH,EAAP,KAAiBC,EAAjB,KACA,EAAkCxH,oBAAS,GAA3C,mBAAOyH,EAAP,KAAkBC,EAAlB,KACA,EAAwB1H,mBAAS,IAAjC,mBAAOgH,EAAP,KAAaW,EAAb,KACA,EAA4B3H,qBAA5B,mBAAO4H,EAAP,KAAeC,EAAf,KA+CA,EAAgC7H,mBAAS,GAAzC,mBAAO8H,EAAP,KAAiBC,GAAjB,KACA,GAAgC/H,qBAAhC,qBAAOgI,GAAP,MAAiBC,GAAjB,MACAxC,qBAAU,WACNxH,IAAKiK,IAAL,yBAA2BJ,IAAYhG,MAAK,SAACyD,GACzClB,EAAQkB,EAAS7E,KAAKsG,KAAKmB,MAC3BF,GAAY1C,EAAS7E,KAAK0H,YAE/B,CAACN,IAEJ,IAAMO,GAAmB,uCAAG,WAAOjI,GAAP,SAAAkI,EAAA,sEAClBP,GAAY3H,GADM,OAExBmI,QAAQC,IAAI,eAAgBpI,GAFJ,2CAAH,sDAKzB,OACI,oCACI,kBAAC6F,EAAA,EAAD,KACI,kBAAC5E,EAAD,CACIC,KAAM+F,EACN9F,WAhEG,SAACkH,GAChBnB,GAAS,IAgEG9F,GAAIoG,EACJnG,WA7CG,SAACD,GAChB,IAAIO,EAAMqC,EAAKsE,WAAU,SAACC,GAAD,OAAaA,EAAQnH,KAAOA,KACrD4C,EAAKwE,OAAO7G,EAAK,MA6CT,kBAACwB,EAAD,CACIjC,KAAMiG,EACN9D,QAlEA,SAACrC,EAAI8C,GACjBG,GAAQ,SAACwE,GAAD,4BACDA,GADC,CAEJ,CACI9E,KAAM3C,EAAG2C,KACTC,MAAO5C,EAAG4C,MACVG,SAAU/C,EAAG+C,SACbF,OAAQ7C,EAAG6C,OACXL,MAAOM,SA2DHV,cAjCM,SAACiF,GACnBjB,GAAY,MAkCJ,kBAACX,EAAD,CACIvF,KAAMmG,EACNV,SAjDC,SAAC3F,EAAI8C,GAClB,IAAI4E,EAAQ1E,EAAKsE,WAAU,SAACC,GAAD,OAAaA,EAAQnH,KAAOJ,EAAGI,MAC1D4C,EAAK0E,GAAO/E,KAAO3C,EAAG2C,KACtBK,EAAK0E,GAAO9E,MAAQ5C,EAAG4C,MACvBI,EAAK0E,GAAO7E,OAAS7C,EAAG6C,OAEpBG,EAAK0E,GAAOlF,MADH,OAATM,EACoB9C,EAAG8C,KAEHA,GA0CZ4C,eAnCO,SAAC2B,GACpBf,GAAa,IAmCDV,KAAMA,IAEV,kBAAC+B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,4EAEJ,kBAAC9C,EAAA,EAAD,CAAU1H,UAAU,eAChB,kBAAC,IAAD,MACA,yBAAKA,UAAU,4CACX,yBAAKA,UAAU,WACX,oCACI,kBAACqE,EAAA,EAAO+D,OAAR,CACI9D,MAAM,UACNjC,QAAS,WACL2G,GAAY,KAHpB,qFAUR,yBAAKhJ,UAAU,wCACX,kBAACyK,EAAA,EAAD,CAAO3C,SAjFL,SAAC1E,GACvBwF,EAAcxF,EAAE2C,OAAOgC,UAiFH,yBAAK/H,UAAU,yBACX,kBAAC,IAAD,CAAQM,KAAK,UAIzB,kBAACoK,EAAA,EAAD,CAAO1K,UAAU,wBAAwB2K,YAAU,GAC/C,+BACI,4BACI,sCACA,gFACA,kDACA,qCACA,kDACA,kFAGR,sCACK/E,QADL,IACKA,OADL,EACKA,EACKgF,QAAO,SAACC,GAAS,IAAD,IACd,OAAoB,QAAflC,IAGD,UAAAkC,EAAItF,YAAJ,eACMuF,cACDC,SACGpC,EAAWmC,kBAHnB,UAKAD,EAAIG,YALJ,aAKA,EACMF,cACDC,SAASpC,EAAWmC,gBATlBD,OACJ,KAaVlI,KAAI,SAACC,EAAI0H,GACN,OACI,wBAAI5B,IAAK4B,GACL,4BACsB,GAAhBhB,EAAW,IACRgB,EAAQ,IAEjB,wBAAItK,UAAU,OACV,wBAAIA,UAAU,uCACV,wBAAIA,UAAU,kBACV,yBACIkI,IAAKtF,EAAGwC,MACR+C,IAAI,SACJ8C,OAAO,KACPC,MAAM,KACNlI,GACI,SAAWJ,EAAGI,KAGtB,kBAACmI,EAAA,EAAD,CACIC,UAAU,SACVrF,OACI,SAAWnD,EAAGI,IAGjBJ,EAAG2C,SAKpB,4BAAK3C,EAAG2C,MACR,4BAAK3C,EAAG4C,OACR,4BAAK5C,EAAG6C,QACR,4BACI,yBAAKzF,UAAU,UACX,kBAAC,IAAD,CACIM,KAAM,GACN+K,SAAO,EACPrI,GAAG,cACHX,QAAS,WACL6G,GAAa,GACbC,EAAQvG,MAGhB,kBAACuI,EAAA,EAAD,CACIC,UAAU,MACVrF,OAAO,eAFX,oDAMA,kBAAC,IAAD,CACIzF,KAAM,GACNN,UAAU,OACVqL,SAAO,EACPrI,GAAG,iBACHX,QAAS,WACLyG,GAAS,GACTO,EAAUzG,EAAGI,OAGrB,kBAACmI,EAAA,EAAD,CACIC,UAAU,SACVrF,OAAO,kBAFX,sDAahC,kBAAC,IAAD,CACI1E,MAAOmI,GACPlI,YAAagI,EACb/H,oBAAqBsI,Q,IC5N9ByB,E,4JAlBX,WACI,OACI,kBAAC,IAAMtK,SAAP,KACI,kBAAC,IAAD,CACIb,gBAAgB,2EAChBI,iBAAiB,6CACjBI,iBAAiB,6EAErB,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACJ,kBAAC,EAAD,a,GAXCP,IAAMC,WCFhB,SAAS0K,IACpB,OACI,oCACI,kBAAC,EAAD","file":"static/js/19.f21ac92b.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst http = axios.create({\r\n    baseURL: 'http://tojbackend.web.bobo.tj/api/',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n    },\r\n})\r\n\r\nexport default http\r\n","import React from \"react\"\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from \"reactstrap\"\r\nimport { Home, Settings } from \"react-feather\"\r\nimport { NavLink } from \"react-router-dom\"\r\nclass BreadCrumbs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"content-header row\">\r\n        <div className=\"content-header-left col-md-9 col-12 mb-2\">\r\n          <div className=\"row breadcrumbs-top\">\r\n            <div className=\"col-12\">\r\n              {this.props.breadCrumbTitle ? (\r\n                <h2 className=\"content-header-title float-left mb-0\">\r\n                  {this.props.breadCrumbTitle}\r\n                </h2>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <div className=\"breadcrumb-wrapper vx-breadcrumbs d-sm-block d-none col-12\">\r\n                <Breadcrumb tag=\"ol\">\r\n                  <BreadcrumbItem tag=\"li\">\r\n                    <NavLink to=\"/\">\r\n                      <Home className=\"align-top\" size={15} />\r\n                    </NavLink>\r\n                  </BreadcrumbItem>\r\n                  <BreadcrumbItem tag=\"li\" className=\"text-primary\">\r\n                    {this.props.breadCrumbParent}\r\n                  </BreadcrumbItem>\r\n                  {this.props.breadCrumbParent2 ? (\r\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\r\n                      {this.props.breadCrumbParent2}\r\n                    </BreadcrumbItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {this.props.breadCrumbParent3 ? (\r\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\r\n                      {this.props.breadCrumbParent3}\r\n                    </BreadcrumbItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  <BreadcrumbItem tag=\"li\" active>\r\n                    {this.props.breadCrumbActive}\r\n                  </BreadcrumbItem>\r\n                </Breadcrumb>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"content-header-right text-md-right col-md-3 col-12 d-md-block d-none\">\r\n          <div className=\"form-group breadcrum-right dropdown\">\r\n            <UncontrolledButtonDropdown>\r\n              <DropdownToggle\r\n                color=\"primary\"\r\n                size=\"sm\"\r\n                className=\"btn-icon btn-round dropdown-toggle\"\r\n              >\r\n                <Settings\r\n                  size={14}\r\n                  style={{\r\n                    left: 0\r\n                  }}\r\n                />\r\n              </DropdownToggle>\r\n              <DropdownMenu tag=\"ul\" right>\r\n                <DropdownItem tag=\"li\">\r\n                  <NavLink className=\"text-dark w-100\" to=\"/chat\">\r\n                    Chat\r\n                  </NavLink>\r\n                </DropdownItem>\r\n                <DropdownItem tag=\"li\">\r\n                  <NavLink className=\"text-dark w-100\" to=\"/email/inbox\">\r\n                    Email\r\n                  </NavLink>\r\n                </DropdownItem>\r\n                <DropdownItem tag=\"li\">\r\n                  <NavLink className=\"text-dark w-100\" to=\"/calendar\">\r\n                    Calendar\r\n                  </NavLink>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledButtonDropdown>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default BreadCrumbs\r\n","import React from \"react\"\r\nimport { Row, Col } from \"reactstrap\"\r\n// import { Star } from \"react-feather\"\r\n\r\nclass ExtensionsHeader extends React.Component {\r\n    render() {\r\n        return (\r\n            <Row className=\"mb-2\">\r\n                <Col sm=\"12\" className=\"ml-50\">\r\n                    <p\r\n                        className=\"font-medium-5 mt-1 extension-title\"\r\n                        data-tour=\"extension-title\"\r\n                    >\r\n                        {this.props.title}\r\n                    </p>\r\n                    {this.props.link ? <a href={this.props.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        {this.props.subTitle}\r\n                    </a> : <p className=\"text-primary\">{this.props.subTitle}</p>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\nexport default ExtensionsHeader\r\n","import React from \"react\"\r\nimport { Card, CardHeader, CardBody, CardTitle, Button } from \"reactstrap\"\r\nimport { toast } from \"react-toastify\"\r\n\r\nclass Toastr extends React.Component {\r\n  notifyDefault = () => toast(\"This is default toast!\")\r\n  notifySuccess = () => toast.success(\"This is success toast!\")\r\n  notifyError = () => toast.error(\"This is error toast!\")\r\n  notifyInfo = () => toast.info(\"This is info toast!\")\r\n  notifyWarning = () => toast.warning(\"This is warning toast!\")\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Types</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <div className=\"d-inline-block mr-1 mb-1\">\r\n            <Button.Ripple color=\"primary\" onClick={this.notifyDefault} outline>\r\n              Default\r\n            </Button.Ripple>\r\n          </div>\r\n          <div className=\"d-inline-block mr-1 mb-1\">\r\n            <Button.Ripple color=\"success\" onClick={this.notifySuccess} outline>\r\n              Success\r\n            </Button.Ripple>\r\n          </div>\r\n          <div className=\"d-inline-block mr-1 mb-1\">\r\n            {\" \"}\r\n            <Button.Ripple color=\"info\" onClick={this.notifyError} outline>\r\n              Danger\r\n            </Button.Ripple>{\" \"}\r\n          </div>\r\n          <div className=\"d-inline-block mr-1 mb-1\">\r\n            <Button.Ripple color=\"warning\" onClick={this.notifyInfo} outline>\r\n              Info\r\n            </Button.Ripple>{\" \"}\r\n          </div>\r\n          <div className=\"d-inline-block mr-1 mb-1\">\r\n            <Button.Ripple color=\"danger\" onClick={this.notifyWarning} outline>\r\n              Warning\r\n            </Button.Ripple>\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Toastr\r\n","import React, { useEffect } from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { toast } from \"react-toastify\"\r\n\r\nexport default function ToastrPositions() {\r\n  const notifyTopCenter = () =>\r\n    toast.info(\"Top Center\", {\r\n      position: toast.POSITION.TOP_CENTER\r\n    })\r\n  return (\r\n    <div className=\"d-inline-block mr-1 mb-1\">\r\n      {/* <Button.Ripple\r\n              color=\"primary\"\r\n              outline\r\n              onClick={this.notifyTopCenter}\r\n            >\r\n              ok\r\n            </Button.Ripple> */}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport ExtensionsHeader from \"../ExtensionHeader\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport ToastrTypes from \"./ToastTypes\"\r\nimport ToastrPositions from \"./ToastPositions\"\r\nimport { ToastContainer } from \"react-toastify\"\r\nimport \"react-toastify/dist/ReactToastify.css\"\r\nimport \"../../../assets/scss/plugins/extensions/toastr.scss\"\r\n\r\nclass Toastr extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Row>\r\n          <Col sm=\"12\">\r\n            <ToastrPositions />\r\n          </Col>\r\n          <ToastContainer />\r\n        </Row>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Toastr\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Pagination,\r\n    PaginationItem,\r\n    PaginationLink\r\n} from \"reactstrap\"\r\nimport { ChevronLeft, ChevronRight } from \"react-feather\"\r\nimport './Index.css'\r\n\r\nexport default function Index({ total, currentPage, onChangeCurrentPage }) {\r\n    let [currentX, setCurrentX] = useState(currentPage)\r\n    const paginators = () => {\r\n        const data = [\r\n            <PaginationItem href=\"#\" className=\"prev-item\">\r\n                <PaginationLink disabled={currentX === 1} onClick={() => { prev() }} href=\"#\" first>\r\n                    <ChevronLeft />\r\n                </PaginationLink>\r\n            </PaginationItem>]\r\n        for (let i = 1; i <= total; i++) {\r\n            data.push(\r\n                <PaginationItem active={currentX === i ? \"active\" : \"\"}>\r\n                    <PaginationLink className={paginatorClassName(i)} onClick={() => { onCurrentPage(i) }} href=\"#\" >{i}</PaginationLink>\r\n                </PaginationItem>)\r\n        }\r\n        data.push(\r\n            <PaginationItem href=\"#\" className=\"next-item\">\r\n                <PaginationLink disabled={currentX === total} onClick={() => { next() }} href=\"#\" last>\r\n                    <ChevronRight />\r\n                </PaginationLink>\r\n            </PaginationItem >)\r\n        return data\r\n    }\r\n    const onCurrentPage = page => {\r\n        updateCurrentPage(page)\r\n    }\r\n    const updateCurrentPage = page => {\r\n        if (page === currentX) return\r\n        setCurrentX(page)\r\n        onChangeCurrentPage(page)\r\n    }\r\n    const next = () => {\r\n        if (currentX === total) {\r\n            return\r\n        }\r\n        const n = currentX + 1\r\n        updateCurrentPage(n)\r\n    }\r\n\r\n    const prev = () => {\r\n        if (currentX === 1) {\r\n            return\r\n        }\r\n        const p = currentX - 1\r\n        updateCurrentPage(p)\r\n    }\r\n\r\n    const paginatorClassName = number => {\r\n        let className = number === currentX ? 'active' : ''\r\n        return className\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container2\">\r\n                <ul className=\"d-flex paginate\">\r\n                    <Pagination className=\"d-flex justify-content-center mt-3\">\r\n                        {paginators().map(el => el)}\r\n                    </Pagination>\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\nimport http from '../../../../../http'\r\nimport { toast } from 'react-toastify'\r\n\r\nexport default function ModalWarning({ show, closeModal, id, deleteUser }) {\r\n    const notifyWarning = (txt) => toast.warning(txt)\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModal(false)\r\n        }\r\n        closeModal(true)\r\n    }\r\n    const submitForm = (e) => {\r\n        deleteUser(id)\r\n        http.delete(`/user/delete/${id}`)\r\n            .then((res) => {\r\n                notifySuccess('Пользователь успешно удален!')\r\n            })\r\n            .catch(function (errors) {\r\n                notifyWarning(`Ошибка , ${errors.message}`)\r\n            })\r\n    }\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-danger\">\r\n                    Внимание\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    Вы уверены, что хотите удалить этого пользователя?\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"danger\"\r\n                        onClick={(e) => {\r\n                            submitForm(e)\r\n                            toggleModal()\r\n                        }}\r\n                    >\r\n                        Удалить\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Card,\r\n    CardBody,\r\n    FormGroup,\r\n    Label,\r\n    CustomInput,\r\n} from 'reactstrap'\r\nimport { Formik, Field, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport '../../../../../assets/scss/plugins/extensions/editor.scss'\r\nimport '../../../../../assets/scss/plugins/extensions/dropzone.scss'\r\nimport http from '../../../../../http'\r\nimport FormData from 'form-data'\r\nimport { toast } from 'react-toastify'\r\n\r\nconst formSchema = Yup.object().shape({\r\n    required: Yup.string().required('Required'),\r\n    minlength: Yup.string().min(4, 'Too Short!').required('Required'),\r\n    maxlength: Yup.string().max(5, 'Too Long!').required('Required'),\r\n})\r\n\r\nexport default function ModalAdd({ show, closeModalAdd, addUser }) {\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const notifyError = (txt) => toast.error(txt)\r\n    const [files, setFiles] = useState([])\r\n    const [preloadImg, setpreloadImg] = useState({ image: null })\r\n\r\n    const [post, setPost] = useState({\r\n        name: null,\r\n        email: null,\r\n        status: null,\r\n        file: null,\r\n        password: null,\r\n    })\r\n\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModalAdd(false)\r\n        }\r\n        closeModalAdd(true)\r\n    }\r\n\r\n    const handleFileInput = (e) => {\r\n        setPost({ ...post, file: e.target.files[0] })\r\n        if (e.target.files && e.target.files[0]) {\r\n            let img = e.target.files[0]\r\n            setpreloadImg({\r\n                image: URL.createObjectURL(img),\r\n            })\r\n        }\r\n    }\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        accept: 'image/*',\r\n        onDrop: (acceptedFiles) => {\r\n            setFiles(\r\n                acceptedFiles.map((file) =>\r\n                    Object.assign(file, {\r\n                        preview: URL.createObjectURL(file),\r\n                    })\r\n                )\r\n            )\r\n        },\r\n    })\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        const data = new FormData()\r\n        data.append('name', post.name)\r\n        data.append('email', post.email)\r\n        data.append('password', post.password)\r\n        data.append('status', post.status)\r\n        data.append('image', post.file)\r\n\r\n        http.post('/register', data)\r\n            .then((response) => {\r\n                addUser(post, preloadImg.image)\r\n                toggleModal()\r\n                notifySuccess('Ползователь успешно добавлен!')\r\n            })\r\n            .catch(function (errors) {\r\n                notifyError(`Упс, ошибка, ${errors.message}`)\r\n            })\r\n    }\r\n\r\n    useEffect(\r\n        () => () => {\r\n            files.forEach((file) => URL.revokeObjectURL(file.preview))\r\n        },\r\n        [files]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered modal-lg\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-primary\">\r\n                    Добавление пользователя\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            required: '',\r\n                            name: '',\r\n                            date: '',\r\n                            minlength: '',\r\n                            maxlength: '',\r\n                        }}\r\n                        validationSchema={formSchema}\r\n                    >\r\n                        {({ errors, touched }) => (\r\n                            <Form className=\"w-100\" onSubmit={submitForm}>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">Имя</Label>\r\n                                            <Field\r\n                                                name=\"text\"\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        name: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className=\"form-control\"\r\n                                            />\r\n                                        </FormGroup>\r\n\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">E-mail</Label>\r\n                                            <Field\r\n                                                name=\"email\"\r\n                                                id=\"required\"\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        email: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">Пароль</Label>\r\n                                            <Field\r\n                                                name=\"password\"\r\n                                                id=\"required\"\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        password:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">Рол</Label>\r\n                                            <CustomInput\r\n                                                type=\"select\"\r\n                                                name=\"select\"\r\n                                                id=\"city\"\r\n                                                onChange={(e) => {\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        status: e.target.value,\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                <option value=\"-1\"></option>\r\n                                                <option value=\"admin\">\r\n                                                    Админ\r\n                                                </option>\r\n                                                <option value=\"manager\">\r\n                                                    Менеджер\r\n                                                </option>\r\n                                            </CustomInput>\r\n                                        </FormGroup>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <section>\r\n                                            <div\r\n                                                {...getRootProps({\r\n                                                    className: 'dropzone',\r\n                                                })}\r\n                                            >\r\n                                                <input\r\n                                                    {...getInputProps()}\r\n                                                    onChange={handleFileInput}\r\n                                                />\r\n                                                <p className=\"mx-1\">\r\n                                                    Перетащите сюда файл или\r\n                                                    щелкните, чтобы выбрать файл\r\n                                                </p>\r\n                                            </div>\r\n                                            <aside className=\"thumb-container\">\r\n                                                <div className=\"dz-thumb\">\r\n                                                    <div className=\"dz-thumb-inner\">\r\n                                                        {preloadImg.image !==\r\n                                                        null ? (\r\n                                                            <img\r\n                                                                src={\r\n                                                                    preloadImg.image\r\n                                                                }\r\n                                                                className=\"dz-img\"\r\n                                                                alt=\"dd\"\r\n                                                            />\r\n                                                        ) : null}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </aside>\r\n                                        </section>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    className=\"mt-2\"\r\n                                >\r\n                                    Добавить\r\n                                </Button.Ripple>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </ModalBody>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Card,\r\n    CardHeader,\r\n    CustomInput,\r\n    CardBody,\r\n    FormGroup,\r\n    Label,\r\n} from 'reactstrap'\r\nimport { Formik, Field, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport '../../../../../assets/scss/plugins/extensions/editor.scss'\r\nimport '../../../../../assets/scss/plugins/extensions/dropzone.scss'\r\nimport http from '../../../../../http'\r\nimport FormData from 'form-data'\r\nimport { toast } from 'react-toastify'\r\n\r\nconst formSchema = Yup.object().shape({\r\n    required: Yup.string().required('Required'),\r\n    minlength: Yup.string().min(4, 'Too Short!').required('Required'),\r\n    maxlength: Yup.string().max(5, 'Too Long!').required('Required'),\r\n})\r\n\r\nexport default function ModalEdit({ show, closeModalEdit, editUser, user }) {\r\n    const notifySuccess = (txt) => toast.success(txt)\r\n    const notifyError = (txt) => toast.error(txt)\r\n    const [files, setFiles] = useState([])\r\n    const [preloadImg, setpreloadImg] = useState({ image: null })\r\n\r\n    const [post, setPost] = useState({\r\n        id: null,\r\n        name: null,\r\n        email: null,\r\n        status: null,\r\n        file: null,\r\n    })\r\n\r\n    useEffect(() => {\r\n        setPost({\r\n            id: user.id,\r\n            name: user.name,\r\n            email: user.email,\r\n            status: user.status,\r\n            file: user.image,\r\n        })\r\n        setpreloadImg({ image: user.image })\r\n    }, [user])\r\n\r\n    const toggleModal = () => {\r\n        if (show) {\r\n            closeModalEdit(false)\r\n        }\r\n        closeModalEdit(true)\r\n    }\r\n    const handleFileInput = (e) => {\r\n        setPost({ ...post, file: e.target.files[0] })\r\n        if (e.target.files && e.target.files[0]) {\r\n            let img = e.target.files[0]\r\n            setpreloadImg({\r\n                image: URL.createObjectURL(img),\r\n            })\r\n        }\r\n    }\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        accept: 'image/*',\r\n        onDrop: (acceptedFiles) => {\r\n            setFiles(\r\n                acceptedFiles.map((file) =>\r\n                    Object.assign(file, {\r\n                        preview: URL.createObjectURL(file),\r\n                    })\r\n                )\r\n            )\r\n        },\r\n    })\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        const data = new FormData()\r\n        data.append('name', post.name)\r\n        data.append('email', post.email)\r\n        data.append('status', post.status)\r\n        data.append('image', post.file)\r\n        http.put(`/user/update/${post.id}`, data)\r\n            .then((response) => {\r\n                toggleModal()\r\n                editUser(post, preloadImg.image)\r\n                notifySuccess('Ползователь успешно изменено!')\r\n            })\r\n            .catch(function (errors) {\r\n                notifyError(`О нет, ${errors.message}`)\r\n            })\r\n    }\r\n\r\n    const thumbs = files.map((file) => (\r\n        <div className=\"dz-thumb\" key={file.name}>\r\n            <div className=\"dz-thumb-inner\">\r\n                <img src={file.preview} className=\"dz-img\" alt={file.name} />\r\n            </div>\r\n        </div>\r\n    ))\r\n\r\n    useEffect(\r\n        () => () => {\r\n            // Make sure to revoke the data uris to avoid memory leaks\r\n            files.forEach((file) => URL.revokeObjectURL(file.preview))\r\n        },\r\n        [files]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={show}\r\n                toggle={toggleModal}\r\n                className=\"modal-dialog-centered modal-lg\"\r\n            >\r\n                <ModalHeader toggle={toggleModal} className=\"bg-primary\">\r\n                    Редактирование пользователя\r\n                </ModalHeader>\r\n                <ModalBody className=\"modal-dialog-centered\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            required: '',\r\n                            name: '',\r\n                            date: '',\r\n                            minlength: '',\r\n                            maxlength: '',\r\n                        }}\r\n                        validationSchema={formSchema}\r\n                    >\r\n                        {({ errors, touched }) => (\r\n                            <Form className=\"w-100\" onSubmit={submitForm}>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">Имя</Label>\r\n                                            <Field\r\n                                                name=\"text\"\r\n                                                value={post.name}\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        name: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className=\"form-control\"\r\n                                            />\r\n                                        </FormGroup>\r\n\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">E-mail</Label>\r\n                                            <Field\r\n                                                name=\"email\"\r\n                                                id=\"required\"\r\n                                                value={post.email}\r\n                                                onChange={(e) =>\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        email: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                                className={`form-control ${\r\n                                                    errors.required &&\r\n                                                    touched.required &&\r\n                                                    'is-invalid'\r\n                                                }`}\r\n                                            />\r\n                                            {errors.required &&\r\n                                            touched.required ? (\r\n                                                <div className=\"invalid-tooltip mt-25\">\r\n                                                    {errors.required}\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </FormGroup>\r\n\r\n                                        <FormGroup className=\"my-3\">\r\n                                            <Label for=\"required\">Рол</Label>\r\n                                            <CustomInput\r\n                                                type=\"select\"\r\n                                                name=\"select\"\r\n                                                id=\"city\"\r\n                                                value={post.status}\r\n                                                onChange={(e) => {\r\n                                                    setPost({\r\n                                                        ...post,\r\n                                                        status: e.target.value,\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                <option value=\"-1\"></option>\r\n                                                <option value=\"admin\">\r\n                                                    Админ\r\n                                                </option>\r\n                                                <option value=\"manager\">\r\n                                                    Менеджер\r\n                                                </option>\r\n                                            </CustomInput>\r\n                                        </FormGroup>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Card>\r\n                                    <CardBody className=\"rdt_Wrapper\">\r\n                                        <section>\r\n                                            <div\r\n                                                {...getRootProps({\r\n                                                    className: 'dropzone',\r\n                                                })}\r\n                                            >\r\n                                                <input\r\n                                                    {...getInputProps()}\r\n                                                    onChange={handleFileInput}\r\n                                                />\r\n                                                <p className=\"mx-1\">\r\n                                                    Перетащите сюда файл или\r\n                                                    щелкните, чтобы выбрать файл\r\n                                                </p>\r\n                                            </div>\r\n                                            <aside className=\"thumb-container\">\r\n                                                <div className=\"dz-thumb\">\r\n                                                    <div className=\"dz-thumb-inner\">\r\n                                                        {preloadImg.image !==\r\n                                                        null ? (\r\n                                                            <img\r\n                                                                src={\r\n                                                                    preloadImg.image\r\n                                                                }\r\n                                                                className=\"dz-img\"\r\n                                                                alt=\"dd\"\r\n                                                            />\r\n                                                        ) : null}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </aside>\r\n                                        </section>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    className=\"mt-2\"\r\n                                >\r\n                                    Изменить\r\n                                </Button.Ripple>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </ModalBody>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Table,\r\n    Input,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    CardTitle,\r\n    UncontrolledTooltip,\r\n} from 'reactstrap'\r\nimport { Search } from 'react-feather'\r\nimport * as Icon from 'react-feather'\r\nimport ModalWarning from './ModalWarning'\r\nimport ModalAdd from './ModalAdd'\r\nimport ModalEdit from './ModalEdit'\r\nimport Paginate from '../../../pagination/Index'\r\nimport http from '../../../../../http'\r\nimport { Link } from 'react-router-dom'\r\nimport { toast } from 'react-toastify'\r\nimport Tst from '../../../toastify/Toastify'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport '../../../../../assets/scss/plugins/extensions/toastr.scss'\r\nimport './Index.css'\r\n\r\nexport default function Index() {\r\n    const [post, setPost] = useState([])\r\n    const [searchPost, setSearchPost] = useState('')\r\n    const [modal, setModal] = useState(false)\r\n    const [modalAdd, setModalAdd] = useState(false)\r\n    const [modalEdit, setModalEdit] = useState(false)\r\n    const [user, setUser] = useState([])\r\n    const [idNews, setIdNews] = useState()\r\n\r\n    const closeModal = (act) => {\r\n        setModal(false)\r\n    }\r\n\r\n    const addUser = (el, file) => {\r\n        setPost((prevState) => [\r\n            ...prevState,\r\n            {\r\n                name: el.name,\r\n                email: el.email,\r\n                password: el.password,\r\n                status: el.status,\r\n                image: file,\r\n            },\r\n        ])\r\n    }\r\n\r\n    const handleSearchValue = (e) => {\r\n        setSearchPost(e.target.value)\r\n    }\r\n\r\n    const deleteUser = (id) => {\r\n        let res = post.findIndex((element) => element.id === id)\r\n        post.splice(res, 1)\r\n    }\r\n\r\n    const editUser = (el, file) => {\r\n        let index = post.findIndex((element) => element.id === el.id)\r\n        post[index].name = el.name\r\n        post[index].email = el.email\r\n        post[index].status = el.status\r\n        if (file === null) {\r\n            post[index].image = el.file\r\n        } else {\r\n            post[index].image = file\r\n        }\r\n    }\r\n\r\n    const closeModalAdd = (act) => {\r\n        setModalAdd(false)\r\n    }\r\n    const closeModalEdit = (act) => {\r\n        setModalEdit(false)\r\n    }\r\n\r\n    const [pagePost, setPagePost] = useState(1)\r\n    const [pagTotal, setPagTotal] = useState()\r\n    useEffect(() => {\r\n        http.get(`get_users?page=${pagePost}`).then((response) => {\r\n            setPost(response.data.user.rows)\r\n            setPagTotal(response.data.pages)\r\n        })\r\n    }, [pagePost])\r\n\r\n    const onUpdateCurrentPage = async (page) => {\r\n        await setPagePost(page)\r\n        console.log('async update', page)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <ModalWarning\r\n                    show={modal}\r\n                    closeModal={closeModal}\r\n                    id={idNews}\r\n                    deleteUser={deleteUser}\r\n                />\r\n                <ModalAdd\r\n                    show={modalAdd}\r\n                    addUser={addUser}\r\n                    closeModalAdd={closeModalAdd}\r\n                />\r\n                <ModalEdit\r\n                    show={modalEdit}\r\n                    editUser={editUser}\r\n                    closeModalEdit={closeModalEdit}\r\n                    user={user}\r\n                />\r\n                <CardHeader>\r\n                    <CardTitle>Ползователи</CardTitle>\r\n                </CardHeader>\r\n                <CardBody className=\"rdt_Wrapper\">\r\n                    <Tst />\r\n                    <div className=\"d-flex flex-wrap justify-content-between\">\r\n                        <div className=\"add-new\">\r\n                            <>\r\n                                <Button.Ripple\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                        setModalAdd(true)\r\n                                    }}\r\n                                >\r\n                                    Добавить новое\r\n                                </Button.Ripple>\r\n                            </>\r\n                        </div>\r\n                        <div className=\"position-relative has-icon-left mb-1\">\r\n                            <Input onChange={handleSearchValue} />\r\n                            <div className=\"form-control-position\">\r\n                                <Search size=\"15\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Table className=\"table-hover-animation\" responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>№</th>\r\n                                <th>Картинка</th>\r\n                                <th>Имя</th>\r\n                                <th>Email</th>\r\n                                <th>Рол</th>\r\n                                <th>Действия</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post\r\n                                ?.filter((val) => {\r\n                                    if (!searchPost === null) {\r\n                                        return val\r\n                                    } else if (\r\n                                        val.name\r\n                                            ?.toLowerCase()\r\n                                            .includes(\r\n                                                searchPost.toLowerCase()\r\n                                            ) ||\r\n                                        val.text\r\n                                            ?.toLowerCase()\r\n                                            .includes(searchPost.toLowerCase())\r\n                                    ) {\r\n                                        return val\r\n                                    }\r\n                                })\r\n                                .map((el, index) => {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <th>\r\n                                                {(pagePost - 1) * 6 +\r\n                                                    (index + 1)}\r\n                                            </th>\r\n                                            <td className=\"p-1\">\r\n                                                <ul className=\"list-unstyled users-list m-0 d-flex\">\r\n                                                    <li className=\"avatar pull-up\">\r\n                                                        <img\r\n                                                            src={el.image}\r\n                                                            alt=\"avatar\"\r\n                                                            height=\"30\"\r\n                                                            width=\"30\"\r\n                                                            id={\r\n                                                                'avatar' + el.id\r\n                                                            }\r\n                                                        />\r\n                                                        <UncontrolledTooltip\r\n                                                            placement=\"bottom\"\r\n                                                            target={\r\n                                                                'avatar' + el.id\r\n                                                            }\r\n                                                        >\r\n                                                            {el.name}\r\n                                                        </UncontrolledTooltip>\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </td>\r\n                                            <td>{el.name}</td>\r\n                                            <td>{el.email}</td>\r\n                                            <td>{el.status}</td>\r\n                                            <td>\r\n                                                <div className=\"d-flex\">\r\n                                                    <Icon.Edit\r\n                                                        size={20}\r\n                                                        outline\r\n                                                        id=\"positionTop\"\r\n                                                        onClick={() => {\r\n                                                            setModalEdit(true)\r\n                                                            setUser(el)\r\n                                                        }}\r\n                                                    />\r\n                                                    <UncontrolledTooltip\r\n                                                        placement=\"top\"\r\n                                                        target=\"positionTop\"\r\n                                                    >\r\n                                                        Изменить\r\n                                                    </UncontrolledTooltip>\r\n                                                    <Icon.Trash2\r\n                                                        size={20}\r\n                                                        className=\"ml-2\"\r\n                                                        outline\r\n                                                        id=\"positionBottom\"\r\n                                                        onClick={() => {\r\n                                                            setModal(true)\r\n                                                            setIdNews(el.id)\r\n                                                        }}\r\n                                                    />\r\n                                                    <UncontrolledTooltip\r\n                                                        placement=\"bottom\"\r\n                                                        target=\"positionBottom\"\r\n                                                    >\r\n                                                        Удалить\r\n                                                    </UncontrolledTooltip>\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                        </tbody>\r\n                    </Table>\r\n                    <Paginate\r\n                        total={pagTotal}\r\n                        currentPage={pagePost}\r\n                        onChangeCurrentPage={onUpdateCurrentPage}\r\n                    />\r\n                </CardBody>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport Breadcrumbs from '../../../breadCrumbs/BreadCrumb'\r\nimport DataTableCustom from './DataTableCustom'\r\n\r\nclass DataTables extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Breadcrumbs\r\n                    breadCrumbTitle=\"Пользователи\"\r\n                    breadCrumbParent=\"Главная\"\r\n                    breadCrumbActive=\"Пользователи\"\r\n                />\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <DataTableCustom />\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataTables\r\n","import React from 'react'\r\nimport Main from '../../components/@vuexy/users/tables/data-tables/DataTables'\r\n\r\nexport default function Users() {\r\n    return (\r\n        <>\r\n            <Main />\r\n        </>\r\n    )\r\n}\r\n"],"sourceRoot":""}